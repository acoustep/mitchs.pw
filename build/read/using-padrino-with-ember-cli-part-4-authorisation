<!doctype html>
<html>
  <head>
    <meta charset="utf-8">

    <!-- Always force latest IE rendering engine or request Chrome Frame -->
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <meta name="author" content="Mitch Stanley">

    <!-- Use title if it's in the page YAML frontmatter -->
    <title>FullStack Stanley | Using Padrino with Ember CLI Part 4: Authorisation</title>

      <meta name="twitter:card" content="summary">
      <meta property="og:description" content="Welcome to Part 3 of my Padrino and Ember series.  This article is for setting up Ember with our Padrino API...">
      <meta property="og:title" content="Using Padrino with Ember CLI Part 4: Authorisation">
      <meta property="og:url" content="http://fullstackstanley.com/read/using-padrino-with-ember-cli-part-4-authorisation">
      <meta property="og:type" content="article">
      <meta property="article:published_time" content="2015-03-03T19:46:00Z">
      <meta property="article:tag" content="Ruby">
      <meta property="article:tag" content="Padrino">
      <meta property="article:tag" content="Ember">
      <meta property="article:tag" content="Ember-CLI">
      <meta property="article:tag" content="Javascript">
      <meta property="article:tag" content="Sequel">
      <meta property="article:tag" content="sqlite">
      <meta property="article:tag" content="RABL">

      <link href="../stylesheets/application-4d950142.css" rel="stylesheet" type="text/css" />
      <link href="../stylesheets/rogue-7109134b.css" rel="stylesheet" type="text/css" />
      <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
        ga('create', 'UA-42788138-1', 'auto');
        ga('send', 'pageview');
      </script>
    </head>

    <body class="read read_using-padrino-with-ember-cli-part-4-authorisation">
      <div class="wrapper-for-content-outside-of-footer">
        <header class="centered-navigation">
	<div class="centered-navigation-wrapper">
		<a href="javascript:void(0)" class="mobile-logo">
			<img src="https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/placeholder_logo_3_dark.png" alt="">
		</a>
		<a href="" class="centered-navigation-menu-button">MENU</a>
		<ul class="centered-navigation-menu">
			<li class="nav-link"><a href="/">Home</a></li>
			<li class="nav-link"><a class="contact" href="#top">Contact</a></li>
		</ul>
	</div>
</header>

        <a name="top"></a>
        <div id="contact">
	<div class="partial-container">
		<h5>Contact</h5>
		<p><a href="http://twitter.com/mitchartemis" target="_blank"><span class="fa fa-twitter"></span> Contact me via Twitter</a></p>
		<p><a href="http://github.com/acoustep" target="_blank"><span class="fa fa-github"></span> Contact me via Github</a></p>
	</div>
</div>

        <div id="container">
          <div id="main">
            	<article>
		<h1>Using Padrino with Ember CLI Part 4: Authorisation</h1>
    <div class="tags">
        <a href="/read/categories/ruby">Ruby</a>
        <a href="/read/categories/padrino">Padrino</a>
        <a href="/read/categories/ember">Ember</a>
        <a href="/read/categories/ember-cli">Ember-CLI</a>
        <a href="/read/categories/javascript">Javascript</a>
        <a href="/read/categories/sequel">Sequel</a>
        <a href="/read/categories/sqlite">sqlite</a>
        <a href="/read/categories/rabl">RABL</a>
    </div>
		<p><em>Posted on Mar  3, 2015</em></p>
		<p>In the last article I went through how to implement authorisation with Ember-simple-auth and Padrino. The next logical step is to implement authorisation with the same toolset.</p>

<p></p>

<p>If you haven&rsquo;t seen the rest of the series you can view them here:</p>

<ul>
<li><a href="/read/using-padrino-with-ember-cli-part-1">Part 1: Setting up the Padrino API</a></li>
<li><a href="/read/using-padrino-with-ember-cli-part-2">Part 2: Setting up Ember CLI to work with Padrino</a></li>
<li><a href="/read/using-padrino-with-ember-cli-part-3-authentication">Part 3: Authentication</a></li>
<li><a href="/read/using-padrino-with-ember-cli-part-5-realtime">Part 5: Realtime</a></li>
</ul>

<p><a href="https://github.com/acoustep/padrino-ember-example">You can also view the full source for the application on Github</a></p>

<h2>Ember</h2>

<p>On the Ember side of things it couldn&rsquo;t be easier to implement.</p>

<p>All we need to do is open up our configuration (<code>app/config/environment.js</code>) and add the <code>authorizer</code> property to our <code>simple-auth</code> environment variable.</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5</pre></td><td class="code"><pre>  <span class="nx">ENV</span><span class="p">[</span><span class="s1">'simple-auth'</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">routeAfterAuthentication</span><span class="p">:</span> <span class="s1">'posts.index'</span><span class="p">,</span>
    <span class="na">routeIfAlreadyAuthenticated</span><span class="p">:</span> <span class="s1">'posts.index'</span><span class="p">,</span>
    <span class="na">authorizer</span><span class="p">:</span> <span class="s1">'simple-auth-authorizer:devise'</span>
  <span class="p">};</span>
</pre></td></tr></tbody></table>
</div>

<p>Let&rsquo;s take a look at the header request for the posts API when we aren&rsquo;t logged in</p>

<p><a href="http://i.imgur.com/43c5W5O.png"><img alt="Not logged in" src="http://i.imgur.com/43c5W5O.png" /></a></p>

<p>Now let&rsquo;s compare that to when we are logged in</p>

<p><a href="http://i.imgur.com/eSBET4k.png"><img alt="Logged in" src="http://i.imgur.com/eSBET4k.png" /></a></p>

<p>As you can see: authorisation is sent with our email and our token.  This will occur on every request so it&rsquo;s up to you to decide with Padrino which API requests need guarding or filtering.</p>

<p>Before we move on to the Padrino section of this article I think it&rsquo;s important for you to be aware of one important feature of Ember-data.</p>

<p>By convention Ember will use something similar to this line of code to fetch a specific post.</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre><span class="nx">store</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">'post'</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>
</pre></td></tr></tbody></table>
</div>

<p>This request queries the server if the post hasn&rsquo;t already been loaded. If the user has viewed the list of posts then it will have been.  Therefore there will be no authorisation checks. With this in mind make sure that you filter out data in the API rather than in Ember.</p>

<h2>Padrino</h2>

<p>I want to mention a sweet tip when working with APIs in Ruby.</p>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre><span class="k">return</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">pretty_generate</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="nf">env</span><span class="p">)</span>
</pre></td></tr></tbody></table>
</div>

<p>If you can&rsquo;t find something that you think should be in the request there is no nicer way of formatting your request. There&rsquo;s also the <a href="http://ruby-doc.org/stdlib-2.1.1/libdoc/pp/rdoc/PP.html">pretty print</a> library but that will only give you output in your command line.</p>

<p>Ember-simple-auth-devise sends the following to our API when we&rsquo;re logged in</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>"Token authentication_token="gDXbsrbDq2H9CKKG42Ts0A", email="admin@admin.co.uk""
</pre></td></tr></tbody></table>
</div>

<p>It isn&rsquo;t the easiest string to parse but taking a little inspiration from Rail&rsquo;s <a href="https://github.com/rails/rails/blob/25b14b4d3238d5474c60826ee1b359537af987ef/actionpack/lib/action_controller/metal/http_authentication.rb#L406">HttpAuthentication module</a> I came out the other end with this as my <code>models/user.rb</code> file.</p>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58</pre></td><td class="code"><pre>
<span class="nb">require</span> <span class="s1">'bcrypt'</span>
<span class="nb">require</span> <span class="s1">'securerandom'</span>

<span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">Sequel</span><span class="o">::</span><span class="no">Model</span>
  <span class="no">Sequel</span><span class="o">::</span><span class="no">Model</span><span class="p">.</span><span class="nf">plugin</span> <span class="ss">:timestamps</span>

  <span class="kp">attr_reader</span> <span class="ss">:readable_token</span>

  <span class="k">def</span> <span class="nf">before_create</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">password</span> <span class="o">=</span> <span class="no">BCrypt</span><span class="o">::</span><span class="no">Password</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="nf">password</span><span class="p">)</span>
    <span class="n">generate_authentication_token</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">sign_in</span> <span class="n">credentials</span>
    <span class="n">user</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="nf">first</span><span class="p">(</span><span class="ss">email: </span><span class="n">credentials</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"email"</span><span class="p">,</span> <span class="s2">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">user</span>

    <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="no">BCrypt</span><span class="o">::</span><span class="no">Password</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="nf">password</span><span class="p">)</span> <span class="o">!=</span> <span class="n">credentials</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"password"</span><span class="p">,</span> <span class="s2">""</span><span class="p">)</span>

    <span class="n">user</span><span class="p">.</span><span class="nf">generate_authentication_token</span>
    <span class="n">user</span><span class="p">.</span><span class="nf">save</span>
    <span class="k">return</span> <span class="n">user</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">generate_authentication_token</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="kp">false</span><span class="p">)</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">authentication_token</span> <span class="o">=</span> <span class="no">SecureRandom</span><span class="p">.</span><span class="nf">urlsafe_base64</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span><span class="kp">false</span><span class="p">)</span>
    <span class="vi">@readable_token</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="nf">authentication_token</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">authentication_token</span> <span class="o">=</span> <span class="no">BCrypt</span><span class="o">::</span><span class="no">Password</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="nf">authentication_token</span><span class="p">)</span>
    <span class="k">return</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">environment</span><span class="p">,</span> <span class="n">parser</span><span class="o">=</span><span class="no">AuthorizationStringParser</span><span class="p">)</span>
    <span class="n">credentials</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">environment</span><span class="p">).</span><span class="nf">parsed_string</span>
    <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">credentials</span><span class="p">.</span><span class="nf">nil?</span>
    <span class="n">user</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">email: </span><span class="n">credentials</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"email"</span><span class="p">,</span> <span class="s2">""</span><span class="p">)).</span><span class="nf">first</span>
    <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">user</span>
    <span class="k">return</span> <span class="no">BCrypt</span><span class="o">::</span><span class="no">Password</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">user</span><span class="p">[</span><span class="ss">:authentication_token</span><span class="p">])</span> <span class="o">==</span> <span class="n">credentials</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"authentication_token"</span><span class="p">,</span> <span class="s2">""</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">AuthorizationStringParser</span>
  <span class="kp">attr_accessor</span> <span class="ss">:parsed_string</span><span class="p">,</span> <span class="ss">:environment</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">environment</span><span class="p">)</span>
    <span class="vi">@environment</span> <span class="o">=</span> <span class="n">environment</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">parsed_string</span>
    <span class="n">parsed_string</span> <span class="o">||=</span> <span class="n">parse_string</span>
  <span class="k">end</span>

  <span class="kp">protected</span>

  <span class="k">def</span> <span class="nf">parse_string</span>
    <span class="n">raw_param_string</span> <span class="o">=</span> <span class="n">environment</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"HTTP_AUTHORIZATION"</span><span class="p">,</span> <span class="s2">""</span><span class="p">)</span>
    <span class="n">raw_param_string</span><span class="p">.</span><span class="nf">gsub</span><span class="p">(</span><span class="sr">/Token\s|"|,/</span><span class="p">,</span> <span class="s2">""</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="s1">' '</span><span class="p">).</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">key_value</span><span class="o">|</span> <span class="n">key_value</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sr">%r/=(.+)?/</span><span class="p">)</span> <span class="p">}.</span><span class="nf">to_h</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table>
</div>

<p>On lines 32-38 we have the new <code>self.authenticate</code> method which takes the <code>request.env</code> (or any hash for that matter).  I chose pass the environment in as <code>request</code> is not available in the model and I didn&rsquo;t feel it was the controller&rsquo;s responsibility to handle parsing the token string.</p>

<p>It&rsquo;s also much nicer to just call <code>User.authenticate request.env</code> and let the model sort out the details. You could argue that it&rsquo;s not the model&rsquo;s responsibility to do this either.  If the application was larger I would consider creating a user repository to do it instead.</p>

<p>On line 32 we reference a new class (which is defined on lines 41-56) .  This <code>AuthorizationStringParser</code> is responsible for&hellip; parsing the authorisation string.</p>

<p>Between 34 and 36 we check if the credentials exist and if the user&rsquo;s email exists in our database. </p>

<p>Finally on line 37 we use <code>Bcrypt</code> to check if the token that&rsquo;s sent is valid.</p>

<p>Now we should open up our posts controller at <code>app/controllers/posts.rb</code> and set the appropriate permissions for our API.</p>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51</pre></td><td class="code"><pre><span class="nb">require</span> <span class="s1">'json'</span>

<span class="no">Api</span><span class="o">::</span><span class="no">App</span><span class="p">.</span><span class="nf">controllers</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">"api/v1/posts"</span><span class="p">,</span> <span class="ss">conditions: </span><span class="p">{</span><span class="ss">:protect</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">}</span> <span class="k">do</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">protect</span><span class="p">(</span><span class="kp">protected</span><span class="p">)</span>
    <span class="n">condition</span> <span class="k">do</span>
      <span class="k">unless</span> <span class="no">User</span><span class="p">.</span><span class="nf">authenticate</span> <span class="n">request</span><span class="p">.</span><span class="nf">env</span>
        <span class="n">halt</span> <span class="mi">403</span><span class="p">,</span> <span class="s2">"No secrets for you!"</span>
      <span class="k">end</span>
    <span class="k">end</span> <span class="k">if</span> <span class="kp">protected</span>
  <span class="k">end</span>

  <span class="n">get</span> <span class="p">:</span><span class="n">index</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">""</span><span class="p">,</span> <span class="ss">protect: </span><span class="kp">false</span> <span class="k">do</span>
    <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">all</span>
    <span class="n">render</span> <span class="s2">"posts/index"</span>
  <span class="k">end</span>

  <span class="n">post</span> <span class="p">:</span><span class="n">create</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">""</span> <span class="k">do</span>
    <span class="n">parameters</span> <span class="o">=</span> <span class="n">post_params</span>
    <span class="k">if</span> <span class="n">parameters</span><span class="p">[</span><span class="s2">"post"</span><span class="p">].</span><span class="nf">nil?</span>
      <span class="k">return</span> <span class="s1">'{}'</span>
    <span class="k">end</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">create</span> <span class="n">parameters</span><span class="p">[</span><span class="s2">"post"</span><span class="p">]</span>
    <span class="n">render</span> <span class="s2">"posts/show"</span>
  <span class="k">end</span>

  <span class="n">get</span> <span class="p">:</span><span class="n">show</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">":id"</span> <span class="k">do</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">[</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">]]</span>
    <span class="n">render</span> <span class="s2">"posts/show"</span>
  <span class="k">end</span>

  <span class="n">put</span> <span class="p">:</span><span class="n">update</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">":id"</span> <span class="k">do</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">[</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">]]</span>
    <span class="k">if</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">nil?</span>
      <span class="k">return</span> <span class="s1">'{}'</span>
    <span class="k">end</span>
    <span class="n">parameters</span> <span class="o">=</span> <span class="n">post_params</span>
    <span class="vi">@post</span><span class="p">.</span><span class="nf">update</span> <span class="n">parameters</span><span class="p">[</span><span class="s2">"post"</span><span class="p">]</span>
    <span class="n">render</span> <span class="s2">"posts/show"</span>
  <span class="k">end</span>

  <span class="n">delete</span> <span class="p">:</span><span class="n">destroy</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">":id"</span> <span class="k">do</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">[</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">]]</span>
    <span class="vi">@post</span><span class="p">.</span><span class="nf">delete</span> <span class="k">unless</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">nil?</span>
  <span class="k">end</span>

<span class="k">end</span>

<span class="k">def</span> <span class="nf">post_params</span>
  <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="nf">body</span><span class="p">.</span><span class="nf">read</span><span class="p">)</span>
<span class="k">end</span>
</pre></td></tr></tbody></table>
</div>

<p>On line 3 we&rsquo;ve added a new parameter, <code>conditions: {:protect =&gt; true}</code> and on lines 5-11 there&rsquo;s a new <code>self.protect</code> method which will be called before every route in the controller.</p>

<p>This is where we take advantage of our new <code>User.authenticate</code> method and return a 403 error for invalid authorisation requests.</p>

<p>On line 13 and 27 we have disabled protection so that the posts can be accessed with out being logged in. All of the other routes that edit the data require authorisation.</p>

<h3>Tests</h3>

<p>We best add some tests for our new authenticate method.  Open up <code>test/models/user_test.rb</code> and add the following.</p>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28</pre></td><td class="code"><pre>
<span class="n">it</span> <span class="s2">"returns true when valid"</span> <span class="k">do</span>
  <span class="n">params</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"email"</span> <span class="o">=&gt;</span> <span class="s2">"admin@admin.co.uk"</span><span class="p">,</span> <span class="s2">"password"</span> <span class="o">=&gt;</span> <span class="s2">"testpassword"</span><span class="p">}</span>
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">sign_in</span> <span class="n">params</span>

  <span class="n">authenticated</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">authenticate</span><span class="p">({</span><span class="s2">"HTTP_AUTHORIZATION"</span> <span class="o">=&gt;</span> <span class="s2">"Token authentication_token=</span><span class="se">\"</span><span class="si">#{</span><span class="n">user</span><span class="p">.</span><span class="nf">readable_token</span><span class="si">}</span><span class="se">\"</span><span class="s2">, email=</span><span class="se">\"</span><span class="si">#{</span><span class="n">user</span><span class="p">.</span><span class="nf">email</span><span class="si">}</span><span class="se">\"</span><span class="s2">"</span><span class="p">})</span>
  <span class="n">assert_equal</span> <span class="kp">true</span><span class="p">,</span> <span class="n">authenticated</span>
<span class="k">end</span>

<span class="n">it</span> <span class="s2">"returns false when invalid"</span> <span class="k">do</span>
  <span class="n">params</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"email"</span> <span class="o">=&gt;</span> <span class="s2">"admin@admin.co.uk"</span><span class="p">,</span> <span class="s2">"password"</span> <span class="o">=&gt;</span> <span class="s2">"testpassword"</span><span class="p">}</span>
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">sign_in</span> <span class="n">params</span>

  <span class="no">User</span><span class="p">.</span><span class="nf">sign_in</span> <span class="n">params</span>

  <span class="n">authenticated</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">authenticate</span><span class="p">({</span><span class="s2">"HTTP_AUTHORIZATION"</span> <span class="o">=&gt;</span> <span class="s2">"Token authentication_token=</span><span class="se">\"</span><span class="si">#{</span><span class="n">user</span><span class="p">.</span><span class="nf">readable_token</span><span class="si">}</span><span class="se">\"</span><span class="s2">, email=</span><span class="se">\"</span><span class="si">#{</span><span class="n">user</span><span class="p">.</span><span class="nf">email</span><span class="si">}</span><span class="se">\"</span><span class="s2">"</span><span class="p">})</span>
  <span class="n">assert_equal</span> <span class="kp">false</span><span class="p">,</span> <span class="n">authenticated</span>
  <span class="k">end</span>

<span class="n">it</span> <span class="s2">"returns false if no header is sent"</span> <span class="k">do</span>
  <span class="n">params</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"email"</span> <span class="o">=&gt;</span> <span class="s2">"admin@admin.co.uk"</span><span class="p">,</span> <span class="s2">"password"</span> <span class="o">=&gt;</span> <span class="s2">"testpassword"</span><span class="p">}</span>
  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">sign_in</span> <span class="n">params</span>

  <span class="no">User</span><span class="p">.</span><span class="nf">sign_in</span> <span class="n">params</span>

  <span class="n">authenticated</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">authenticate</span><span class="p">({})</span>
  <span class="n">assert_equal</span> <span class="kp">false</span><span class="p">,</span> <span class="n">authenticated</span>
<span class="k">end</span>
</pre></td></tr></tbody></table>
</div>

<h2>Tidying up Ember</h2>

<p>At this point our authorisation is in place but it&rsquo;s hardly a good idea to leave all those buttons for adding, editing and deleting data lying around.</p>

<p>Let&rsquo;s change <code>app/templates/posts/index.hbs</code> to hide these buttons when the user&rsquo;s aren&rsquo;t logged in.</p>
<div class="highlight html"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28</pre></td><td class="code"><pre><span class="nt">&lt;h3&gt;</span>Latest Posts<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">"table table-striped"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;th</span> <span class="na">class=</span><span class="s">“col-md-3”</span><span class="nt">&gt;</span>Title<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;th</span> <span class="na">class=</span><span class="s">"col-md-3"</span><span class="nt">&gt;</span>Created at<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;th</span> <span class="na">class=</span><span class="s">"col-md-3"</span><span class="nt">&gt;</span>Last modified<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;th</span> <span class="na">class=</span><span class="s">"col-md-3"</span><span class="nt">&gt;</span>Actions<span class="nt">&lt;/th&gt;</span>
  <span class="nt">&lt;/tr&gt;</span>
{{#each post in model}}
<span class="nt">&lt;tr&gt;</span>
  <span class="nt">&lt;td&gt;</span>{{ post.title }}<span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span>{{ post.createdAt }}<span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span>{{ post.updatedAt }}<span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span>
    {{#link-to 'posts.show' post classNames="btn btn-success"}}View{{/link-to}}
    {{#if session.isAuthenticated}}
      {{#link-to 'posts.edit' post classNames="btn btn-info"}}Edit{{/link-to}}
      <span class="nt">&lt;button</span> <span class="err">{{</span><span class="na">action</span> <span class="err">'</span><span class="na">delete</span><span class="err">'</span> <span class="na">post</span><span class="err">}}</span> <span class="na">class=</span><span class="s">"btn btn-danger"</span><span class="nt">&gt;</span>Delete<span class="nt">&lt;/button&gt;</span>
    {{/if}}
  <span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
{{/each}}
<span class="nt">&lt;/table&gt;</span>
{{#if session.isAuthenticated}}
  {{#link-to 'posts.new' classNames="btn btn-primary"}}
    New Post
  {{/link-to}}
{{/if}}
</pre></td></tr></tbody></table>
</div>

<p>We have already disabled viewing the new posts route in a previous article. We should do the same for the edit posts, too.  Open up <code>app/routes/posts/edit.js</code> and add the <code>AuthenticatedRouteMixin</code>.</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17</pre></td><td class="code"><pre><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">'ember'</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">AuthenticatedRouteMixin</span> <span class="nx">from</span> <span class="s1">'simple-auth/mixins/authenticated-route-mixin'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">AuthenticatedRouteMixin</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">deactivate</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">model</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">modelFor</span><span class="p">(</span><span class="s1">'posts/edit'</span><span class="p">);</span>
    <span class="nx">model</span><span class="p">.</span><span class="nx">rollback</span><span class="p">();</span>
  <span class="p">},</span>
  <span class="nx">actions</span><span class="err">:</span> <span class="p">{</span>
    <span class="nl">save</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">modelFor</span><span class="p">(</span><span class="s1">'posts/edit'</span><span class="p">).</span><span class="nx">save</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">_this</span><span class="p">.</span><span class="nx">transitionTo</span><span class="p">(</span><span class="s1">'posts.index'</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p>Here are two previews of the system. One logged in and one logged out.
<a href="http://i.imgur.com/Nl5LaD0.png"><img alt="Logged in" src="http://i.imgur.com/Nl5LaD0.png" /></a></p>

<p><a href="http://i.imgur.com/yKSuZyR.png"><img alt="Logged out" src="http://i.imgur.com/yKSuZyR.png" /></a></p>

<h2>Summary</h2>

<p>That&rsquo;s it for authorisation with Ember and Padrino! We&rsquo;ve covered setting up Ember to use the ember-simple-auth devise authoriser and updated our Padrino application which now reads the request headers to check for valid authentication details.</p>

<p>We&rsquo;ve also restricted specific routes to users that are logged in and updated the Ember front-end to reflect these changes.</p>

	</article>
  <hr>
  <h2>About the Author</h2>
  <div id="about-me">
	<div class="partial-container">
    <p>Hi, I'm Mitch and I'm a 26 year old programmer from the UK.</p>
    
    <p>I work for a web design agency in Telford called The Studio 4 where I build web applications with many different languages and tools.</p>

		<p>In my spare time I do many things. I like to read books, lift weights, play guitar, play video games and write these articles!</p>
	</div>
</div>

	<div class="pagination">
		<ul>
			<li class="page-prev"><a href="/">Back to Latest Blogs</a></li>
		</ul>
	</div>
	<div id="disqus_thread"></div>
	<script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
		        var disqus_shortname = 'mitchstanleysblog'; // required: replace example with your forum shortname
				
				        /* * * DON'T EDIT BELOW THIS LINE * * */
						        (function() {
	            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
	            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
	            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
	        })();
		</script>
		<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
		<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></span></a></a></noscript></script></div>

          </div>
        </div>
        <div class="push"></div>
      </div>

      <footer class="footer-2">
        <div class="partial-container">
          <ul>
            <li><a class="contact" href="#">Contact</a></li>
          </ul>

          <div class="footer-secondary-links">
            <ul class="footer-social">
              <li>
                <a href="https://twitter.com/mitchartemis"><span class="fa fa-twitter"></span></a>
              </li>
              <li>
                <a href="https://github.com/acoustep"><span class="fa fa-github"></span></a>
              </li>
            </ul>
          </div>
        </div>
      </footer>
      <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
      <script src="../javascripts/application-678994e1.js" type="text/javascript"></script>
    </body>
  </html>
