<!doctype html>
<html>
  <head>
    <meta charset="utf-8">

    <!-- Always force latest IE rendering engine or request Chrome Frame -->
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <meta name="author" content="Mitch Stanley">

    <!-- Use title if it's in the page YAML frontmatter -->
    <title>FullStack Stanley | Handling slug URLs in Ember and Phoenix</title>
      <meta name="description" content="">

      <meta name="twitter:card" content="summary">
      <meta property="og:description" content="Handling slug URLs in Ember and Phoenix">
      <meta property="og:title" content="Handling slug URLs in Ember and Phoenix">
      <meta property="og:url" content="http://fullstackstanley.com/read/handling-slug-urls-in-ember-and-phoenix">
      <meta property="og:type" content="article">
      <meta property="article:published_time" content="2015-11-02T19:22:00Z">
      <meta property="article:tag" content="Elixir">
      <meta property="article:tag" content="Phoenix">
      <meta property="article:tag" content="Ember JS">

      <link href="../stylesheets/application-7ad9a6eb.css" rel="stylesheet" type="text/css" />
      <link href="../stylesheets/rogue-7109134b.css" rel="stylesheet" type="text/css" />
      <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
        ga('create', 'UA-42788138-1', 'auto');
        ga('send', 'pageview');
      </script>
    </head>

    <body class="read read_handling-slug-urls-in-ember-and-phoenix">
      <div class="wrapper-for-content-outside-of-footer">
        <header class="centered-navigation">
	<div class="centered-navigation-wrapper">
		<a href="javascript:void(0)" class="mobile-logo">
			<img src="https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/placeholder_logo_3_dark.png" alt="">
		</a>
		<a href="" class="centered-navigation-menu-button">MENU</a>
		<ul class="centered-navigation-menu">
			<li class="nav-link"><a href="/">Home</a></li>
			<li class="nav-link"><a class="contact" href="#top">Contact</a></li>
		</ul>
	</div>
</header>

        <a name="top"></a>
        <div id="contact">
	<div class="partial-container">
		<h5>Contact</h5>
		<p><a href="http://twitter.com/mitchartemis" target="_blank"><span class="fa fa-twitter"></span> Contact me via Twitter</a></p>
		<p><a href="http://github.com/acoustep" target="_blank"><span class="fa fa-github"></span> Contact me via Github</a></p>
	</div>
</div>

        <div id="container">
          <div id="main">
            	<article>
		<h1>Handling slug URLs in Ember and Phoenix</h1>
    <div class="tags">
        <a href="/read/categories/elixir">Elixir</a>
        <a href="/read/categories/phoenix">Phoenix</a>
        <a href="/read/categories/ember-js">Ember JS</a>
    </div>
		<p><em>Posted on Nov  2, 2015</em></p>
		<p>I&rsquo;ve recently started playing around with the PEEP stack (Postgres Elixir Ember Phoenix). One of the first things I wanted achieve is using SEO-friendly slugs instead of ids in Ember application&rsquo;s URLs.</p>

<p>This article presumes you know how to set up a fresh Ember project and a fresh Phoenix application as we will be diving head first into the code. </p>

<h3>Version info:</h3>

<p>These are the tools I&rsquo;m using for this application.</p>

<ul>
<li>Node 4.2.1</li>
<li>Ember 1.13.8 / 2.0.2</li>
<li>Elixir 1.0.5</li>
<li>Phoenix 1.0.3</li>
<li>PostgreSQL 9.4.5</li>
</ul>

<h3>Notes</h3>

<p>There is no special configuration required for each to work together. Although, I recommend launching Ember with the proxy argument as shown below.</p>
<div class="highlight shell"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>ember serve --proxy<span class="o">=</span>http://localhost:4000
</pre></td></tr></tbody></table>
</div>

<p>This means you don&rsquo;t have to worry about Content Security Policy between Ember and your API.</p>

<p>If you haven&rsquo;t already, check out Maxwell Holder&rsquo;s <a href="http://maxwellholder.com/blog/build-a-blog-with-phoenix-and-ember">Build a Blog with Phoenix and Ember.js</a>. This article really helped me get started with using Ember and Phoenix together.</p>

<p>I&rsquo;ll be demonstrating how to set up 2 pages: a page with a list of products and a page for individual products which have a slug instead of an ID. This includes querying the slug on the API as well.</p>

<h2>Show me the code!</h2>

<p>The code is available on <a href="https://github.com/acoustep/ember-phoenix-slug-example">Github</a>.</p>

<p>Now on to the tutorial!</p>

<h2>Setting up Phoenix</h2>

<p>First run <code>mix ecto.create</code> to make sure the database is set up correctly.</p>

<p>Phoenix provders a really useful generator for APIs. Run the following command to get the cruft of the work done for you.</p>
<div class="highlight shell"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>mix phoenix.gen.json Product products name:string slug:string blurb:text preview:string featured:boolean
</pre></td></tr></tbody></table>
</div>

<p>The above command generates the view, controller, migration and model files. </p>

<p>The fields include a name, a slug, a blurb for a short product description, preview which will be a link to an image and featured which is a boolean which states if the product is featured or not.</p>

<p>To make this accessible we need to add resource to the router.</p>
<div class="highlight elixir"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5</pre></td><td class="code"><pre><span class="c1"># web/router.ex</span>
<span class="n">scope</span> <span class="sd">"</span><span class="s2">/api"</span><span class="p">,</span> <span class="no">Api</span> <span class="k">do</span> 
  <span class="n">pipe_through</span> <span class="ss">:api</span>
  <span class="n">resources</span> <span class="sd">"</span><span class="s2">/products"</span><span class="p">,</span> <span class="no">ProductController</span><span class="p">,</span> <span class="ss">only:</span> <span class="p">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:show</span><span class="p">]</span>
<span class="k">end</span>
</pre></td></tr></tbody></table>
</div>

<p><a href="https://github.com/acoustep/ember-phoenix-slug-example/commit/059687bb6634e58752e870c6681876ed55b95db1">Git Commit</a></p>

<p>We&rsquo;ve added the API pipeline which we will be modifying shortly. For now, migrate the database in the terminal</p>
<div class="highlight shell"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>mix ecto.migrate
</pre></td></tr></tbody></table>
</div>

<p>As of now the API works, however, it needs a couple of tweeks to be compatible with Ember and to support slugs.</p>

<h3>Ember compatible API</h3>

<p>Phoenix wraps JSON objects and collections with the &ldquo;data&rdquo; attribute but Ember (currently in 2.1 and below) uses the model&rsquo;s singular name for objects and plural name for collections.</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2</pre></td><td class="code"><pre><span class="c1">// Phoenix currently</span>
<span class="p">{</span><span class="s2">"data"</span><span class="err">:</span><span class="p">[]}</span>
</pre></td></tr></tbody></table>
</div>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3</pre></td><td class="code"><pre><span class="c1">// What Ember wants</span>
<span class="p">{</span><span class="s2">"products"</span><span class="err">:</span><span class="p">[]}</span> <span class="c1">// Collection</span>
<span class="p">{</span><span class="s2">"product"</span><span class="err">:</span><span class="p">[]}</span> <span class="c1">// Single Objects</span>
</pre></td></tr></tbody></table>
</div>

<p>Phoenix makes this really easy to change.</p>

<p>In <code>product_view.ex</code> change <code>data</code> in both the <code>index</code> and <code>show</code> <code>render</code> methods.</p>

<p>The <code>render</code> method which pattern matches <code>index.json</code> should change <code>data</code> to <code>products</code> and the <code>render</code> method which pattern matches <code>show.json</code> should change <code>data</code> to <code>product</code>.</p>
<div class="highlight elixir"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21</pre></td><td class="code"><pre><span class="c1"># web/views/product_view.ex</span>
<span class="k">defmodule</span> <span class="no">Api</span><span class="o">.</span><span class="no">ProductView</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">Api</span><span class="o">.</span><span class="no">Web</span><span class="p">,</span> <span class="ss">:view</span>

  <span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="sd">"</span><span class="s2">index.json"</span><span class="p">,</span> <span class="p">%{</span><span class="ss">products:</span> <span class="n">products</span><span class="p">})</span> <span class="k">do</span>
    <span class="p">%{</span><span class="ss">products:</span> <span class="n">render_many</span><span class="p">(</span><span class="n">products</span><span class="p">,</span> <span class="no">Api</span><span class="o">.</span><span class="no">ProductView</span><span class="p">,</span> <span class="sd">"</span><span class="s2">product.json"</span><span class="p">)}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="sd">"</span><span class="s2">show.json"</span><span class="p">,</span> <span class="p">%{</span><span class="ss">product:</span> <span class="n">product</span><span class="p">})</span> <span class="k">do</span>
    <span class="p">%{</span><span class="ss">product:</span> <span class="n">render_one</span><span class="p">(</span><span class="n">product</span><span class="p">,</span> <span class="no">Api</span><span class="o">.</span><span class="no">ProductView</span><span class="p">,</span> <span class="sd">"</span><span class="s2">product.json"</span><span class="p">)}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="sd">"</span><span class="s2">product.json"</span><span class="p">,</span> <span class="p">%{</span><span class="ss">product:</span> <span class="n">product</span><span class="p">})</span> <span class="k">do</span>
    <span class="p">%{</span><span class="ss">id:</span> <span class="n">product</span><span class="o">.</span><span class="n">id</span><span class="p">,</span>
      <span class="ss">name:</span> <span class="n">product</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
      <span class="ss">slug:</span> <span class="n">product</span><span class="o">.</span><span class="n">slug</span><span class="p">,</span>
      <span class="ss">blurb:</span> <span class="n">product</span><span class="o">.</span><span class="n">blurb</span><span class="p">,</span>
      <span class="ss">preview:</span> <span class="n">product</span><span class="o">.</span><span class="n">preview</span><span class="p">,</span>
      <span class="ss">featured:</span> <span class="n">product</span><span class="o">.</span><span class="n">featured</span><span class="p">,</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table>
</div>

<p><a href="https://github.com/acoustep/ember-phoenix-slug-example/commit/ad372e8f6588e104ceb23e083ca3f8af6eb5b672">Git commit</a></p>

<h3>Just add slugs</h3>

<p>To search for <code>slug</code> instead of the <code>id</code> primary key, we need to replace the <code>Repo.get</code> with a query that uses <code>Repo.one</code> or <code>Repo.one!</code> in the product controller - using the exclamation marked version will throw an error if nothing is found. I recommend this route as you can configure Ember to redirect elsewhere in this situation.</p>
<div class="highlight elixir"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7</pre></td><td class="code"><pre><span class="k">def</span> <span class="n">show</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="sd">"</span><span class="s2">id"</span> <span class="o">=&gt;</span> <span class="n">slug</span><span class="p">})</span> <span class="k">do</span>
  <span class="n">query</span> <span class="o">=</span> <span class="n">from</span> <span class="n">p</span> <span class="ow">in</span> <span class="no">Product</span><span class="p">,</span>
    <span class="ss">where:</span> <span class="n">p</span><span class="o">.</span><span class="n">slug</span> <span class="o">==</span> <span class="o">^</span><span class="n">slug</span><span class="p">,</span>
    <span class="ss">select:</span> <span class="n">p</span>
  <span class="n">product</span> <span class="o">=</span> <span class="no">Repo</span><span class="o">.</span><span class="n">one!</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
  <span class="n">render</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="sd">"</span><span class="s2">show.json"</span><span class="p">,</span> <span class="ss">product:</span> <span class="n">product</span><span class="p">)</span>
<span class="k">end</span>
</pre></td></tr></tbody></table>
</div>

<p><a href="https://github.com/acoustep/ember-phoenix-slug-example/commit/d45d0fb8b9eff63784af5e11fd836e3b87858458">Git commit</a></p>

<p>On line 1 <code>id</code> has been altered to say <code>slug</code>, this is just so we&rsquo;re clear that we&rsquo;re dealing with a slug. The map key is still <code>id</code>, though, as the product resource route added previously is set up to pattern match for <code>id</code>. To change it to <code>slug</code> requires adding a separate route.</p>

<p>Lines 2 to 4 is the query to find the slug in the database.</p>

<p>Line 5 uses <code>Repo.one!</code> to fetch the first match for the query or throw an error.</p>

<h3>CORS in production</h3>

<p>Although using ember serve &ndash;proxy will solve this issue in development, it&rsquo;s worth adding <a href="https://github.com/whatyouhide/corsica">Corsica</a> for production environments.</p>

<p>After following the installation instructions modify the API pipeline in the router:</p>
<div class="highlight elixir"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4</pre></td><td class="code"><pre>  <span class="n">pipeline</span> <span class="ss">:api</span> <span class="k">do</span>
    <span class="n">plug</span> <span class="ss">:accepts</span><span class="p">,</span> <span class="p">[</span><span class="sd">"</span><span class="s2">json"</span><span class="p">]</span>
    <span class="n">plug</span> <span class="no">Corsica</span><span class="p">,</span> <span class="ss">origins:</span> <span class="p">[</span><span class="sd">"</span><span class="s2">localhost:4200"</span><span class="p">,</span> <span class="sd">"</span><span class="s2">example.com"</span><span class="p">]</span>
  <span class="k">end</span>
</pre></td></tr></tbody></table>
</div>

<p><a href="https://github.com/acoustep/ember-phoenix-slug-example/commit/2fcfb08479549e451039b586cc64a2970289d3ce">Git commit</a></p>

<p>This will modify response headers to show which sources can load the API.</p>

<p>Make sure that you restart your Phoenix server after installing Corsica.</p>
<div class="highlight shell"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>mix phoenix.server
</pre></td></tr></tbody></table>
</div>

<p>Before you continue to the Ember section make sure you have some data in the database! For this example I&rsquo;ve used a lorem ipsum generator and <a href="http://www.fillmurray.com/">Fill Murray</a> for the preview column.</p>

<h2>Ember</h2>

<p>Let&rsquo;s use Twitter Bootstrap to make the application look presentable.</p>
<div class="highlight shell"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>ember install ember-bootstrap
</pre></td></tr></tbody></table>
</div>

<p>Note that because I have named my app &ldquo;App&rdquo; I have had to rename my <code>app.css</code> to <code>style.css</code>.</p>

<p>Modify the application template to use the bootstrap grid</p>
<div class="highlight handlebars"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13</pre></td><td class="code"><pre><span class="c">{{!-- app/templates/application.hbs --}}</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-xs-12"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">"title"</span><span class="nt">&gt;</span>Ember Phoenix Slugs<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-xs-12"</span><span class="nt">&gt;</span>
      <span class="k">{{</span><span class="nv">outlet</span><span class="k">}}</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></td></tr></tbody></table>
</div>

<p><a href="https://github.com/acoustep/ember-phoenix-slug-example/commit/044ee7d5c3622e7f2dca25c7fe47e45116a0ad96">Git commit</a></p>

<p>Make sure you restart the Ember server after installing the addon.</p>
<div class="highlight shell"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>ember serve --proxy<span class="o">=</span>http://localhost:4000
</pre></td></tr></tbody></table>
</div>

<p>Before we can hook up Ember to the API, we need to generate the application adapter to add the &lsquo;api&rsquo; namespace that we&rsquo;ve set up in Phoenix.</p>
<div class="highlight shell"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>ember g adapter application
</pre></td></tr></tbody></table>
</div>

<p>Open up the newly created adapter file and add the namespace property.</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6</pre></td><td class="code"><pre><span class="c1">// app/adapters/application.js</span>
<span class="kr">import</span> <span class="nx">DS</span> <span class="nx">from</span> <span class="s1">'ember-data'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">RESTAdapter</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">namespace</span><span class="p">:</span> <span class="s1">'api'</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p><a href="https://github.com/acoustep/ember-phoenix-slug-example/commit/2e85a9e40fd40ec1d27c9ab6d79ce564c21bf5bd">Git commit</a></p>

<p>Now we can set up the model we&rsquo;ll use to connect to the API</p>
<div class="highlight shell"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>ember g model product
</pre></td></tr></tbody></table>
</div>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9</pre></td><td class="code"><pre><span class="c1">// app/models/product.js</span>
<span class="kr">import</span> <span class="nx">DS</span> <span class="nx">from</span> <span class="s1">'ember-data'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(),</span>
  <span class="na">slug</span><span class="p">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(),</span>
  <span class="na">blurb</span><span class="p">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(),</span>
  <span class="na">preview</span><span class="p">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(),</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p>Generate the index route to connect to the product model.</p>
<div class="highlight shell"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>ember g route index
</pre></td></tr></tbody></table>
</div>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8</pre></td><td class="code"><pre><span class="c1">// app/routes/index.js</span>
<span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">'ember'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">model</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">findAll</span><span class="p">(</span><span class="s1">'product'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p>Here is the template for the index. It loops through all the products and links to them in the image and headings.</p>
<div class="highlight handlebars"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13</pre></td><td class="code"><pre><span class="c">{{!-- app/templates/index.hbs --}}</span> 
<span class="nt">&lt;h2&gt;</span>Products<span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
  <span class="k">{{#</span><span class="nn">each</span> <span class="nv">model</span> <span class="nv">as</span> <span class="err">|</span><span class="nv">product</span><span class="err">|</span><span class="k">}}</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-xs-3"</span><span class="nt">&gt;</span>
      <span class="k">{{#</span><span class="nn">link-to</span> <span class="s1">'product'</span> <span class="nv">product</span><span class="k">}}</span>
        <span class="nt">&lt;img</span> <span class="na">src=</span><span class="k">{{</span><span class="nv">product</span><span class="p">.</span><span class="nv">preview</span><span class="k">}}</span><span class="err"> </span><span class="s">class="product--image"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h3&gt;</span><span class="k">{{</span><span class="nv">product</span><span class="p">.</span><span class="nv">name</span><span class="k">}}</span><span class="nt">&lt;/h3&gt;</span>
      <span class="k">{{/</span><span class="nn">link-to</span><span class="k">}}</span>
      <span class="nt">&lt;p&gt;</span><span class="k">{{</span><span class="nv">product</span><span class="p">.</span><span class="nv">blurb</span><span class="k">}}</span><span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="k">{{/</span><span class="nn">each</span><span class="k">}}</span>
<span class="nt">&lt;/div&gt;</span>
</pre></td></tr></tbody></table>
</div>

<p><a href="https://github.com/acoustep/ember-phoenix-slug-example/commit/c3db53c239aed1f676db8c8c469d3e2535f8064a">Git commit</a></p>

<p>Note that if you&rsquo;re using Ember 2 or onwards you can remove the curly brackets around the image source value.</p>

<p>Next we need to generate the product route.</p>

<h3>Product page</h3>

<p>As of now Ember will throw an error due to using a product route which doesn&rsquo;t exist yet. Let&rsquo;s fix that.</p>
<div class="highlight shell"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>ember g route product
</pre></td></tr></tbody></table>
</div>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12</pre></td><td class="code"><pre><span class="c1">// app/routes/product.js</span>
<span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">'ember'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">model</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">'product'</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">modelFor</span><span class="p">(</span><span class="s1">'product'</span><span class="p">));</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">'product'</span><span class="p">,</span> <span class="nx">params</span><span class="p">.</span><span class="nx">product_slug</span><span class="p">);</span>
  <span class="p">},</span>
  <span class="na">serialize</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span> <span class="na">product_slug</span><span class="p">:</span> <span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'slug'</span><span class="p">)</span> <span class="p">};</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p>On line 6 we try to find the product by the <code>product_slug</code>.</p>

<p>The <code>serialize</code> method needs to be implemented when an attribute other than <code>id</code> is used for the primary key. We are telling the Ember that when a product object is passed through the <code>link-to</code> method to use the <code>slug</code> instead. <code>product_slug</code> will match in the route we are creating below (On line 10):</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12</pre></td><td class="code"><pre><span class="c1">// app/router.js</span>
<span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">'ember'</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">config</span> <span class="nx">from</span> <span class="s1">'./config/environment'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">location</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">locationType</span>
<span class="p">});</span>

<span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'product'</span><span class="p">,</span> <span class="p">{</span><span class="na">path</span><span class="p">:</span> <span class="s1">'/products/:product_slug'</span><span class="p">});</span>
<span class="p">});</span>
<span class="kr">export</span> <span class="k">default</span> <span class="nx">Router</span><span class="p">;</span>
</pre></td></tr></tbody></table>
</div>

<p>The template:</p>
<div class="highlight handlebars"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6</pre></td><td class="code"><pre><span class="c">{{!-- app/templates/index.hbs --}}</span> 
<span class="nt">&lt;h2&gt;</span><span class="k">{{</span><span class="nv">model</span><span class="p">.</span><span class="nv">name</span><span class="k">}}</span><span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;img</span> <span class="na">src=</span><span class="k">{{</span><span class="nv">model</span><span class="p">.</span><span class="nv">preview</span><span class="k">}}</span><span class="err"> </span><span class="s">class="product--image"</span><span class="nt">&gt;</span>
<span class="nt">&lt;h3&gt;</span><span class="k">{{</span><span class="nv">model</span><span class="p">.</span><span class="nv">name</span><span class="k">}}</span><span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;p&gt;</span><span class="k">{{</span><span class="nv">model</span><span class="p">.</span><span class="nv">blurb</span><span class="k">}}</span><span class="nt">&lt;/p&gt;</span>
<span class="k">{{</span><span class="nv">link-to</span> <span class="s1">'Back'</span> <span class="s1">'index'</span> <span class="nv">class</span><span class="o">=</span><span class="s2">"btn btn-default"</span><span class="k">}}</span>
</pre></td></tr></tbody></table>
</div>

<p><a href="https://github.com/acoustep/ember-phoenix-slug-example/commit/686ee06580dc349143b1c72e105356c12ec3916c">Git commit</a></p>

<h3>Error page</h3>

<p>If the slug can&rsquo;t be found then Phoenix will return a 404 error. The easiest way to handle this in Ember is create a <code>product-error</code> template which Ember will show automatically.</p>
<div class="highlight handlebars"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4</pre></td><td class="code"><pre><span class="c">{{!-- app/templates/product-error.hbs --}}</span> 
<span class="nt">&lt;h2&gt;</span>Whoops<span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;p&gt;</span>This page could not be found.<span class="nt">&lt;/p&gt;</span>
<span class="k">{{</span><span class="nv">link-to</span> <span class="s1">'Back'</span> <span class="s1">'index'</span> <span class="nv">class</span><span class="o">=</span><span class="s2">"btn btn-default"</span><span class="k">}}</span>
</pre></td></tr></tbody></table>
</div>

<p><a href="https://github.com/acoustep/ember-phoenix-slug-example/commit/4aac158851145c73a24b47ffedf3baae46d37ffd">Git commit</a></p>

<h1>Setting slug as the primary key</h1>

<p>Right now the application works, however, while refreshing an individual product page if you Ember tries to find a product with an <code>id</code> of <code>slug</code>, then a <code>slug</code> of <code>slug</code>. This results in two separate objects rather than one.</p>

<p>This sounds rather confusing and is best illustrated through Ember inspector:</p>

<p><img title="Extra object" alt="Extra object" src="http://i.imgur.com/2l8qD9T.png" /></p>

<p>To get around this we can change the product model primary key to slug by generating a product serializer and updating the <code>primaryKey</code> property.</p>
<div class="highlight shell"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>ember g serializer product
</pre></td></tr></tbody></table>
</div>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6</pre></td><td class="code"><pre><span class="c1">// app/serializers/product.js</span>
<span class="kr">import</span> <span class="nx">DS</span> <span class="nx">from</span> <span class="s1">'ember-data'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">RESTSerializer</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">primaryKey</span><span class="p">:</span> <span class="s1">'slug'</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p>By doing this the slug attribute on each product object gets moved to the id field and leaves slug as undefined. We will need to update the product route to reflect this change.</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12</pre></td><td class="code"><pre><span class="c1">// app/routes/product.js</span>
<span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">'ember'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">model</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">'product'</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">modelFor</span><span class="p">(</span><span class="s1">'product'</span><span class="p">));</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">'product'</span><span class="p">,</span> <span class="nx">params</span><span class="p">.</span><span class="nx">product_slug</span><span class="p">);</span>
  <span class="p">},</span>
  <span class="na">serialize</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span> <span class="na">product_slug</span><span class="p">:</span> <span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'id'</span><span class="p">)</span> <span class="p">};</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p><a href="https://github.com/acoustep/ember-phoenix-slug-example/commit/871e667e8cf84605f3bb1b4d2bb5a7dca914a614">Git commit</a></p>

<p>Notice now on line 10 how <code>model.get()</code> is looking for id rather than <code>slug</code>.</p>

<p>Alternatively, we could remove the <code>serialize</code> method and update the <code>router.js</code> to look for <code>:id</code> rather than <code>:product_slug</code>.</p>

<h2>Preview</h2>

<p><img title="Product listing page" alt="Product listing page" src="http://i.imgur.com/Hlj8Ef5.png" /></p>

<p><img title="Product page" alt="Product page" src="http://i.imgur.com/yflOrbM.png" /></p>

<p><img title="Whoops 404 page" alt="Whoops 404 page" src="http://i.imgur.com/iwpxAif.png" /></p>

<h2>Summary</h2>

<p>In this tutorial we have gone through how to set up <code>index</code> and <code>show</code> methods in a Phoenix application to work with URL slugs.</p>

<p>We have connected this API to an Ember application which can view product listings and link to individual product pages.</p>

	</article>
  <hr>
  <h2>About the Author</h2>
  <div id="about-me">
	<div class="partial-container">
    <p>Hi, I'm Mitch and I'm a 28 year old programmer from the UK.</p>
    
    <p>I work for a web design agency in Telford called <a href="https://isev.co.uk" target="_blank">isev</a>. We build cool products like <a href="https://pukkateam.com">PukkaTeam</a> for remote workers.</p>

		<p>In my spare time I do many things. I like reading books, lifting weights, bouldering, boardgaming, Zelda and writing these articles!</p>
	</div>
</div>

	<div class="pagination">
		<ul>
			<li class="page-prev"><a href="/">Back to Latest Blogs</a></li>
		</ul>
	</div>
	<div id="disqus_thread"></div>
	<script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
		        var disqus_shortname = 'mitchstanleysblog'; // required: replace example with your forum shortname
				
				        /* * * DON'T EDIT BELOW THIS LINE * * */
						        (function() {
	            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
	            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
	            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
	        })();
		</script>
		<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
		<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></span></a></a></noscript></script></div>

          </div>
        </div>
        <div class="push"></div>
      </div>

      <footer class="footer-2">
        <div class="partial-container">
          <ul>
            <li><a class="contact" href="#">Contact</a></li>
          </ul>

          <div class="footer-secondary-links">
            <ul class="footer-social">
              <li>
                <a href="https://twitter.com/mitchartemis"><span class="fa fa-twitter"></span></a>
              </li>
              <li>
                <a href="https://github.com/acoustep"><span class="fa fa-github"></span></a>
              </li>
            </ul>
          </div>
        </div>
      </footer>
      <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
      <script src="../javascripts/application-af3913ea.js" type="text/javascript"></script>
      <script>
      (function(d, t) {
          var g = d.createElement(t),
              s = d.getElementsByTagName(t)[0];
          g.src = 'http://assets.gfycat.com/js/gfyajax-0.517d.js';
          s.parentNode.insertBefore(g, s);
      }(document, 'script'));
      </script>
    </body>
  </html>
