<!doctype html>
<html>
  <head>
    <meta charset="utf-8">

    <!-- Always force latest IE rendering engine or request Chrome Frame -->
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <meta name="author" content="Mitch Stanley">

    <!-- Use title if it's in the page YAML frontmatter -->
    <title>FullStack Stanley | Using Padrino with Ember CLI Part 2</title>
      <meta name="description" content="">

      <meta name="twitter:card" content="summary">
      <meta property="og:description" content="Welcome to Part 2 of my Padrino and Ember series.  This article is for setting up Ember with our Padrino API...">
      <meta property="og:title" content="Using Padrino with Ember CLI Part 2">
      <meta property="og:url" content="http://fullstackstanley.com/read/using-padrino-with-ember-cli-part-2">
      <meta property="og:type" content="article">
      <meta property="article:published_time" content="2015-02-15T09:17:00Z">
      <meta property="article:tag" content="Ruby">
      <meta property="article:tag" content="Padrino">
      <meta property="article:tag" content="Ember">
      <meta property="article:tag" content="Ember-CLI">
      <meta property="article:tag" content="Javascript">
      <meta property="article:tag" content="Sequel">
      <meta property="article:tag" content="sqlite">
      <meta property="article:tag" content="RABL">

      <link href="../stylesheets/application-4816ef59.css" rel="stylesheet" type="text/css" />
      <link href="../stylesheets/rogue-7109134b.css" rel="stylesheet" type="text/css" />
      <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
        ga('create', 'UA-42788138-1', 'auto');
        ga('send', 'pageview');
      </script>
    </head>

    <body class="read read_using-padrino-with-ember-cli-part-2">
      <div class="wrapper-for-content-outside-of-footer">
        <header class="centered-navigation">
	<div class="centered-navigation-wrapper">
		<a href="javascript:void(0)" class="mobile-logo">
			<img src="https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/placeholder_logo_3_dark.png" alt="">
		</a>
		<a href="" class="centered-navigation-menu-button">MENU</a>
		<ul class="centered-navigation-menu">
			<li class="nav-link"><a href="/">Home</a></li>
			<li class="nav-link"><a class="contact" href="#top">Contact</a></li>
		</ul>
	</div>
</header>

        <a name="top"></a>
        <div id="contact">
	<div class="partial-container">
		<h5>Contact</h5>
		<p><a href="http://twitter.com/mitchartemis" target="_blank"><span class="fa fa-twitter"></span> Contact me via Twitter</a></p>
		<p><a href="http://github.com/acoustep" target="_blank"><span class="fa fa-github"></span> Contact me via Github</a></p>
	</div>
</div>

        <div id="container">
          <div id="main">
            	<article>
		<h1>Using Padrino with Ember CLI Part 2</h1>
    <div class="tags">
        <a href="/read/categories/ruby">Ruby</a>
        <a href="/read/categories/padrino">Padrino</a>
        <a href="/read/categories/ember">Ember</a>
        <a href="/read/categories/ember-cli">Ember-CLI</a>
        <a href="/read/categories/javascript">Javascript</a>
        <a href="/read/categories/sequel">Sequel</a>
        <a href="/read/categories/sqlite">sqlite</a>
        <a href="/read/categories/rabl">RABL</a>
    </div>
		<p><em>Posted on Feb 15, 2015</em></p>
		<p>Welcome to Part 2 of my Padrino and Ember series.  This article is for setting up Ember with our Padrino API.  If you missed part 1, go take a look <a href="/read/using-padrino-with-ember-cli-part-1">here</a>. You can view the full source on <a href="https://github.com/acoustep/padrino-ember-example">Github</a>.</p>

<p>I am using the following library versions for this tutorial:</p>

<ul>
<li>IO.js v1.2.0</li>
<li>NPM 2.5.1</li>
<li>watchman 3.0.0 (Installed with homebrew)</li>
<li>Ember 1.8.1</li>
<li>Ember Data 1.0.0-beta.14.1</li>
<li>jQuery 1.11.2</li>
<li>Handlebars 1.3.0</li>
</ul>

<p></p>

<p>Before starting make sure you’re in your <code>Blog</code> directory and not <code>Blog/API</code>.  </p>

<p>To create our Ember application we&rsquo;ll use <code>ember new app</code> and then cd into it.</p>

<p>Run <code>ember serve --proxy http://localhost:3000</code> so that we can use our API. The proxy URL should match our Padrino API.  By default the port for Padrino is 3000.</p>

<h2>Bootstrap</h2>

<p>I’m adding Bootstrap in <code>app/index.html</code> and changing the templates to use bootstrap as well. This is entirely optional. Feel free to use your own CSS / preferred CSS Framework.</p>
<div class="highlight html"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30</pre></td><td class="code"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"X-UA-Compatible"</span> <span class="na">content=</span><span class="s">"IE=edge"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>App<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"description"</span> <span class="na">content=</span><span class="s">""</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1"</span><span class="nt">&gt;</span>

    {{content-for 'head'}}

    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"assets/vendor.css"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"assets/app.css"</span><span class="nt">&gt;</span>

    {{content-for 'head-footer'}}
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"application"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    {{content-for 'body'}}

    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"assets/vendor.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"assets/app.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

    {{content-for 'body-footer'}}
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></td></tr></tbody></table>
</div>

<p>In <code>app/app.js</code> we can add the <code>rootElement</code> parameter so that our Ember application gets loaded inside of the container.</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6</pre></td><td class="code"><pre><span class="kd">var</span> <span class="nx">App</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Application</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">modulePrefix</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">modulePrefix</span><span class="p">,</span>
  <span class="na">podModulePrefix</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">podModulePrefix</span><span class="p">,</span>
  <span class="na">Resolver</span><span class="p">:</span> <span class="nx">Resolver</span><span class="p">,</span>
  <span class="na">rootElement</span><span class="p">:</span> <span class="s1">'#application'</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p>Finally, in <code>app/templates/application.hbs</code> we’ll add some rows and columns to make use of Bootstrap’s responsive grid.</p>
<div class="highlight html"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10</pre></td><td class="code"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-md-12"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h2</span> <span class="na">id=</span><span class="s">"title"</span><span class="nt">&gt;</span>Welcome to Ember with Padrino<span class="nt">&lt;/h2&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-md-12"</span><span class="nt">&gt;</span>
    {{outlet}}
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></td></tr></tbody></table>
</div>

<h3>Routes</h3>

<p>In <code>app/router.js</code> add the following routes:</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7</pre></td><td class="code"><pre><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s1">'posts'</span><span class="p">,</span> <span class="p">{</span><span class="na">path</span><span class="p">:</span> <span class="s1">'/'</span><span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s1">'posts.new'</span><span class="p">,</span> <span class="p">{</span><span class="na">path</span><span class="p">:</span> <span class="s1">'/post/new'</span><span class="p">});</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s1">'posts.show'</span><span class="p">,</span> <span class="p">{</span><span class="na">path</span><span class="p">:</span> <span class="s1">'/post/:post_id'</span><span class="p">});</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s1">'posts.edit'</span><span class="p">,</span> <span class="p">{</span><span class="na">path</span><span class="p">:</span> <span class="s1">'/post/:post_id/edit'</span><span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p>This is what our Route should look like in Ember Inspector:</p>

<p><a href="http://i.imgur.com/gDaAlCR.png"><img alt="Ember Routes" src="http://i.imgur.com/gDaAlCR.png" /></a></p>

<h3>Adapter</h3>

<p>We can set up the application adapter by running the following command</p>

<p><code>ember g adapter application</code></p>

<p>This will make a new file in <code>app/adapters/application.js</code>.  Let’s change the code to work with our API:</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5</pre></td><td class="code"><pre><span class="kr">import</span> <span class="nx">DS</span> <span class="nx">from</span> <span class="s1">'ember-data'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">ActiveModelAdapter</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">namespace</span><span class="p">:</span> <span class="s1">'api/v1'</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p>On line 3 we change the adapter to be the Rails-style adapter.  As we’ve set our API to work the same way as Rails we can make use of its conventions.</p>

<p>On line 4 we prefix all API requests with <code>api/v1</code> which is how we’ve set it in our API.</p>

<h3>Routes and Resources</h3>

<p>Let’s generate the Post resource, routes and templates. Ember CLI makes this super easy:</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5</pre></td><td class="code"><pre>ember g resource posts title:string content:string createdAt:string updatedAt:string
ember g route posts/index
ember g route posts/new
ember g route posts/show
ember g route posts/edit
</pre></td></tr></tbody></table>
</div>

<p>This sets us up with all the files we will need to edit.</p>

<p>Note how <code>createdAt</code> and <code>updatedAt</code> are camel case here but snake case in Padrino.  The <code>ActiveModelAdapter</code> will take care of this conversion so we don’t have to!</p>

<p>In <code>app/routes/posts.js</code> we should tell Ember where to find our posts like so:</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7</pre></td><td class="code"><pre><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">'ember'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">model</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">'post'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<h2>Index</h2>

<p>Let’s update the posts index template in <code>app/templates/posts/index.hbs</code> to iterate over the posts:</p>
<div class="highlight html"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></td><td class="code"><pre><span class="nt">&lt;h3&gt;</span>Latest Posts<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;h3&gt;</span>Latest Posts<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">"table table-striped"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;th</span> <span class="na">class=</span><span class="s">“col-md-3”</span><span class="nt">&gt;</span>Title<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;th</span> <span class="na">class=</span><span class="s">"col-md-3"</span><span class="nt">&gt;</span>Created at<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;th</span> <span class="na">class=</span><span class="s">"col-md-3"</span><span class="nt">&gt;</span>Last modified<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;th</span> <span class="na">class=</span><span class="s">"col-md-3"</span><span class="nt">&gt;</span>Actions<span class="nt">&lt;/th&gt;</span>
  <span class="nt">&lt;/tr&gt;</span>
{{#each post in model}}
<span class="nt">&lt;tr&gt;</span>
  <span class="nt">&lt;td&gt;</span>{{ post.title }}<span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span>{{ post.createdAt }}<span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span>{{ post.updatedAt }}<span class="nt">&lt;/td&gt;</span>
  <span class="nt">&lt;td&gt;</span>
    {{#link-to 'posts.show' post classNames="btn btn-success"}}View{{/link-to}}
    {{#link-to 'posts.edit' post classNames="btn btn-info”}}Edit{{/link-to}}
    <span class="nt">&lt;button</span> <span class="err">{{</span><span class="na">action</span> <span class="err">'</span><span class="na">delete</span><span class="err">'</span> <span class="na">post</span><span class="err">}}</span> <span class="na">class=</span><span class="s">"btn btn-danger"</span><span class="nt">&gt;</span>Delete<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/td&gt;</span>
<span class="nt">&lt;/tr&gt;</span>
{{/each}}
<span class="nt">&lt;/table&gt;</span>
{{#link-to 'posts.new' classNames="btn btn-primary"}}
  New Post
{{/link-to}}
</pre></td></tr></tbody></table>
</div>

<p>Nothing too interesting is going on here. We are looping through our model in a Bootstrap-flavoured table.  Each post has 2 links, 1 to view the post and 1 to edit.  It also has an action to remove the post.  None of these do anything as of yet, so let’s get the rest of the application working.</p>

<h2>New</h2>

<p>The posts new route file (<code>app/routes/posts/new.js</code>) will have three jobs:</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></td><td class="code"><pre><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">'ember'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">model</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">(</span><span class="s1">'post'</span><span class="p">);</span>
  <span class="p">},</span>
  <span class="na">deactivate</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">model</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">modelFor</span><span class="p">(</span><span class="s1">'posts/new'</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'isNew'</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">model</span><span class="p">.</span><span class="nx">destroyRecord</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">actions</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">save</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">modelFor</span><span class="p">(</span><span class="s1">'posts/new'</span><span class="p">).</span><span class="nx">save</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">_this</span><span class="p">.</span><span class="nx">transitionTo</span><span class="p">(</span><span class="s1">'posts.index'</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p>The model method will create a new instance of post for us in the Ember application.</p>

<p>Deactivate will trigger if we switch out of the route without saving.  We use this because if we don’t save the the new post to the API (we click cancel) Ember will keep this “dirty” object hanging around in the application. <code>destroyRecord</code> will remove it for us.</p>

<p>Lastly we set the save action to create the post and go back to the posts.index route.</p>

<p>Modify two templates, <code>app/templates/posts/new.hbs</code></p>
<div class="highlight html"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2</pre></td><td class="code"><pre><span class="nt">&lt;h3&gt;</span>New Post<span class="nt">&lt;/h3&gt;</span>
{{ partial 'posts/form' }}
</pre></td></tr></tbody></table>
</div>

<p>Our Form partial located in <code>app/templates/posts/-form.hbs</code></p>
<div class="highlight html"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14</pre></td><td class="code"><pre><span class="nt">&lt;form</span> <span class="err">{{</span><span class="na">action</span> <span class="err">"</span><span class="na">save</span><span class="err">"</span> <span class="na">on=</span><span class="s">"submit"</span><span class="err">}}</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"title"</span><span class="nt">&gt;</span>Title<span class="nt">&lt;/label&gt;</span>
    {{ input value=model.title class="form-control"}}
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"content"</span><span class="nt">&gt;</span>Content<span class="nt">&lt;/label&gt;</span>
    {{ textarea value=model.content class="form-control"}}
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-primary"</span><span class="nt">&gt;</span>Save<span class="nt">&lt;/button&gt;</span>
  {{#link-to 'posts.index'}}<span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn btn-default"</span><span class="nt">&gt;</span>Cancel<span class="nt">&lt;/button&gt;</span>{{/link-to}}
<span class="nt">&lt;/form&gt;</span>
</pre></td></tr></tbody></table>
</div>

<p>This partial template will be used for our edit form as well.</p>

<p>Here’s the how the form looks now:</p>

<p><a href="http://i.imgur.com/5ieTDRa.png"><img alt="New Post" src="http://i.imgur.com/5ieTDRa.png" /></a></p>

<h2>Edit</h2>

<p><code>app/routes/posts/new.js</code> will handle saving and rolling back if a user decides to cancel an edit:</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16</pre></td><td class="code"><pre><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">'ember'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">deactivate</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">model</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">modelFor</span><span class="p">(</span><span class="s1">'posts/edit'</span><span class="p">);</span>
    <span class="nx">model</span><span class="p">.</span><span class="nx">rollback</span><span class="p">();</span>
  <span class="p">},</span>
  <span class="na">actions</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">save</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">modelFor</span><span class="p">(</span><span class="s1">'posts/edit'</span><span class="p">).</span><span class="nx">save</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">_this</span><span class="p">.</span><span class="nx">transitionTo</span><span class="p">(</span><span class="s1">'posts.index'</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p>And because we made our form a partial that is only tied to the existence of a model our <code>app/templates/posts/edit.js</code> is as simple as this</p>
<div class="highlight html"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2</pre></td><td class="code"><pre><span class="nt">&lt;h3&gt;</span>Edit Post: {{model.title}}<span class="nt">&lt;/h3&gt;</span>
{{ partial 'posts/form'}}
</pre></td></tr></tbody></table>
</div>

<p><a href="http://i.imgur.com/1U1nIMU.png"><img alt="Edit Post" src="http://i.imgur.com/1U1nIMU.png" /></a></p>

<h2>Show</h2>

<p>For when we want to view the post without editing.  Thanks to Ember having awesome conventions we only need to edit the template file <code>app/templates/posts/show.hbs</code></p>
<div class="highlight html"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3</pre></td><td class="code"><pre><span class="nt">&lt;h3&gt;</span>{{model.title}}<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;div&gt;</span>{{model.content}}<span class="nt">&lt;/div&gt;</span>
{{#link-to 'posts.index' classNames="btn btn-default"}}Back{{/link-to}}
</pre></td></tr></tbody></table>
</div>

<h2>Delete</h2>

<p>Last but by no means least we need to place a delete action in our <code>app/routes/posts/index.js</code>.  How else would we delete all the test posts we’ve made?</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14</pre></td><td class="code"><pre><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">'ember'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">actions</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">delete</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">post</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>

      <span class="nx">post</span><span class="p">.</span><span class="nx">destroyRecord</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">_this</span><span class="p">.</span><span class="nx">transitionTo</span><span class="p">(</span><span class="s1">'posts.index'</span><span class="p">);</span>
      <span class="p">});</span>

    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p>Here’s a preview of our posts index with a couple of posts added:</p>

<p><a href="http://i.imgur.com/7xiLC8c.png"><img alt="Posts" src="http://i.imgur.com/7xiLC8c.png" /></a></p>

<h2>What next?</h2>

<p>If you&rsquo;re interested in setting up authentication you can check part 3 of this series, <a href="/read/using-padrino-with-ember-cli-part-3-authentication">Using Padrino with Ember: Authentication</a>.</p>

<p>There is a lot of room for growth. Things that are often needed in SPA’s include validation, flash messages and realtime data. </p>

<p>They are all very doable with Padrino and Ember but are beyond the scope of this article.</p>

<p>For server-side validation take a look at the <a href="http://sequel.jeremyevans.net/rdoc/files/doc/validations_rdoc.html">Sequel validation documentation</a>.  Infact, the whole Sequel documentation is pretty awesome.</p>

<p>I recommend adding an error attribute to RABL objects which Ember can check for. If it exists it should stop transitions and loop through all of the errors in the template.</p>

<p>For flash messages I tend to create a mixin from the code in <a href="http://aaronvb.com/articles/ember-js-flash-messages.html">this article</a> which works well.</p>

<p>For realtime data I’ve had success with <a href="https://pusher.com/">Pusher</a> which has a nice free package. The <a href="https://github.com/pusher/pusher-gem">Pusher gem</a> is really easy to integrate with Padrino.</p>

<h2>Summary</h2>

<p>Well there you have it. Ember CLI with a Padrino backend. All the beauty of Ruby without the all of the unnecessary parts of Rails.</p>

<p>In these two posts we’ve covered a lot of the core functionality needed in any single page application. Creating, reading, updating and deleting data from our API and from Ember.</p>

<p>We’ve also taken a look at what we can use when we need to do more than just simple CRUD commands.</p>

<p>If you wish to see the full source for both of these articles you can view it on <a href="https://github.com/acoustep/padrino-ember-example">Github</a>.</p>

	</article>
  <hr>
  <h2>About the Author</h2>
  <div id="about-me">
	<div class="partial-container">
    <p>Hi, I'm <a href="https://mitchstanley.co.uk" target="_blank">Mitch</a> and I'm a 29 year old programmer from the UK.</p>
    
    <p>I work for a web design agency in Telford called <a href="https://isev.co.uk" target="_blank">isev</a>. We build cool products like <a href="https://pukkateam.com">PukkaTeam</a> for remote workers.</p>

		<p>In my spare time I do many things. I like <a href="https://www.goodreads.com/user/show/12913105-mitch-stanley" target="_blank">reading fantasy books</a>, lifting weights, bouldering, boardgaming, and programming.</p>
	</div>
</div>

	<div class="pagination">
		<ul>
			<li class="page-prev"><a href="/">Back to Latest Blogs</a></li>
		</ul>
	</div>
	<div id="disqus_thread"></div>
	<script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
		        var disqus_shortname = 'mitchstanleysblog'; // required: replace example with your forum shortname
				
				        /* * * DON'T EDIT BELOW THIS LINE * * */
						        (function() {
	            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
	            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
	            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
	        })();
		</script>
		<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
		<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></span></a></a></noscript></script></div>

          </div>
        </div>
        <div class="push"></div>
      </div>

      <footer class="footer-2">
        <div class="partial-container">
          <ul>
            <li><a class="contact" href="#">Contact</a></li>
          </ul>

          <div class="footer-secondary-links">
            <ul class="footer-social">
              <li>
                <a href="https://twitter.com/mitchartemis"><span class="fa fa-twitter"></span></a>
              </li>
              <li>
                <a href="https://github.com/acoustep"><span class="fa fa-github"></span></a>
              </li>
            </ul>
          </div>
        </div>
      </footer>
      <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
      <script src="../javascripts/application-678994e1.js" type="text/javascript"></script>
      <script>
      (function(d, t) {
          var g = d.createElement(t),
              s = d.getElementsByTagName(t)[0];
          g.src = 'http://assets.gfycat.com/js/gfyajax-0.517d.js';
          s.parentNode.insertBefore(g, s);
      }(document, 'script'));
      </script>
    </body>
  </html>
