<!doctype html>
<html>
  <head>
    <meta charset="utf-8">

    <!-- Always force latest IE rendering engine or request Chrome Frame -->
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <meta name="author" content="Mitch Stanley">

    <!-- Use title if it's in the page YAML frontmatter -->
    <title>FullStack Stanley | Using Eloquent, Twig and Slim PHP</title>

      <meta name="twitter:card" content="summary">
      <meta property="og:description" content="Originally while I was writing this blog I intended to make a step by step guide to putting together three of my favourite PHP tools. After a few issues and finding out that Slim Views is now a thing I decided instead to put together a git repo so anyone can get started quickly.">
      <meta property="og:title" content="Using Eloquent, Twig and Slim PHP">
      <meta property="og:url" content="http://fullstackstanley.com/read/using-eloquent-twig-and-slim-php">
      <meta property="og:type" content="article">
      <meta property="article:published_time" content="2013-08-07T00:00:00Z">
      <meta property="article:tag" content="Eloquent">
      <meta property="article:tag" content="Slim">
      <meta property="article:tag" content="Twig">
      <meta property="article:tag" content="PHP">
      <meta property="article:tag" content="slim-twig-eloquent">

      <link href="../stylesheets/application-0178d91a.css" rel="stylesheet" type="text/css" />
      <link href="../stylesheets/rogue-7109134b.css" rel="stylesheet" type="text/css" />
      <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
        ga('create', 'UA-42788138-1', 'auto');
        ga('send', 'pageview');
      </script>
    </head>

    <body class="read read_using-eloquent-twig-and-slim-php">
      <div class="wrapper-for-content-outside-of-footer">
        <header class="centered-navigation">
	<div class="centered-navigation-wrapper">
		<a href="javascript:void(0)" class="mobile-logo">
			<img src="https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/placeholder_logo_3_dark.png" alt="">
		</a>
		<a href="" class="centered-navigation-menu-button">MENU</a>
		<ul class="centered-navigation-menu">
			<li class="nav-link"><a href="/">Home</a></li>
			<li class="nav-link"><a class="contact" href="#top">Contact</a></li>
		</ul>
	</div>
</header>

        <a name="top"></a>
        <div id="contact">
	<div class="partial-container">
		<h5>Contact</h5>
		<p><a href="http://twitter.com/mitchartemis" target="_blank"><span class="fa fa-twitter"></span> Contact me via Twitter</a></p>
		<p><a href="http://github.com/acoustep" target="_blank"><span class="fa fa-github"></span> Contact me via Github</a></p>
	</div>
</div>

        <div id="container">
          <div id="main">
            	<article>
		<h1>Using Eloquent, Twig and Slim PHP</h1>
    <div class="tags">
        <a href="/read/categories/eloquent">Eloquent</a>
        <a href="/read/categories/slim">Slim</a>
        <a href="/read/categories/twig">Twig</a>
        <a href="/read/categories/php">PHP</a>
        <a href="/read/categories/slim-twig-eloquent">slim-twig-eloquent</a>
    </div>
		<p><em>Posted on Aug  7, 2013</em></p>
		<p><em>Note</em>: See the <a href="/read/using-eloquent-twig-and-slim-php-revisited">update to this post</a> where I&rsquo;ve made several changes</p>

<p>Originally while I was writing this blog I intended to make a step by
step guide to putting together three of my favourite PHP tools. After a
few issues and finding out that <a href="https://github.com/codeguy/Slim-Views">Slim Views</a> is now a thing I decided
instead to put together a git repo so anyone can get started quickly. I
will use this blog post to quickly show how it works!</p>

<p><em>Note that this tutorial doesn’t aim to teach you Slim, Twig or Eloquent
- It’s to show you how to use them together effectively.</em></p>

<p>You can find the repo here: <a href="https://github.com/acoustep/slim-twig-eloquent">https://github.com/acoustep/slim-twig-eloquent</a></p>

<p>After following the Installation instructions you should be able to use each component as well as Eloquent validation.</p>

<p></p>

<h3>Folder Structure</h3>

<ul>
<li>app/

<ul>
<li>config/</li>
<li>models/</li>
<li>views/</li>
<li>routes.php</li>
<li>application.php</li>
<li>Validator.php</li>
</ul></li>
<li>public/ (or public_html/)

<ul>
<li>css/</li>
<li>js/</li>
<li>images/</li>
<li>.htaccess</li>
<li>index.php</li>
</ul></li>
<li>vendor/</li>
<li>config.php</li>
<li>index.php</li>
</ul>

<p>As the <code>public/index.php</code> calls <code>/index.php</code> from the root of the application which then includes <code>config.php</code>, <code>app/application.php</code> and <code>app/routes.php</code>.</p>

<p><code>app/application.php</code> sets Slim, Twig and Eloquent up so that you can create all of your Slim routes in <code>app/routes.php</code>.</p>

<h3>Example Usage</h3>

<p>Assuming you&rsquo;ve now run <code>git clone https://github.com/acoustep/slim-twig-eloquent.git</code>, <code>composer install</code>, renamed the <code>config.php</code> file and changed your database settings let&rsquo;s create a table.  I&rsquo;ve opted to use MySQL - here&rsquo;s the query to make a <code>posts</code> table:</p>
<div class="highlight sql"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8</pre></td><td class="code"><pre><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="nv">`posts`</span> <span class="p">(</span>
  <span class="nv">`id`</span> <span class="n">int</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="n">unsigned</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
  <span class="nv">`title`</span> <span class="n">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="nv">`content`</span> <span class="n">text</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="nv">`created_at`</span> <span class="n">datetime</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="nv">`updated_at`</span> <span class="k">timestamp</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">DEFAULT</span> <span class="k">CURRENT_TIMESTAMP</span><span class="p">,</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="nv">`id`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="k">DEFAULT</span> <span class="n">CHARSET</span><span class="o">=</span><span class="n">utf8</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">1</span> <span class="p">;</span>
</pre></td></tr></tbody></table>
</div>

<p>A simple table with an unique id integer, title string, content text, created<em>at datetime and updated</em>at timestamp.</p>

<p>Next for the routes.  Enter the following in <code>app/routes.php</code>:</p>
<div class="highlight php"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>
<span class="cm">/* new */</span>
<span class="nv">$app</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span> <span class="s1">'/posts/new'</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span> <span class="nv">$app</span><span class="p">,</span> <span class="nv">$data</span> <span class="p">)</span> <span class="p">{</span>
  <span class="nv">$data</span><span class="p">[</span><span class="s1">'post'</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Post</span><span class="p">;</span>
  <span class="nv">$app</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span> <span class="s1">'posts_new.twig'</span><span class="p">,</span> <span class="nv">$data</span> <span class="p">);</span>
<span class="p">})</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">(</span> <span class="s1">'posts_new'</span> <span class="p">);</span>

<span class="cm">/* create */</span>
<span class="nv">$app</span><span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span> <span class="s1">'/posts'</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span> <span class="nv">$app</span><span class="p">,</span> <span class="nv">$data</span> <span class="p">)</span> <span class="p">{</span>
  <span class="nv">$post</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Post</span><span class="p">;</span>
  <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">'title'</span><span class="p">];</span>
  <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">content</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">'content'</span><span class="p">];</span>
  <span class="k">if</span><span class="p">(</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span> <span class="k">array</span><span class="p">(</span> 
    <span class="s1">'title'</span>   <span class="o">=&gt;</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">'title'</span><span class="p">],</span> 
    <span class="s1">'content'</span> <span class="o">=&gt;</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">'content'</span><span class="p">]</span> 
  <span class="p">)))</span>
  <span class="p">{</span>
    <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">();</span>
    <span class="nv">$app</span><span class="o">-&gt;</span><span class="na">flash</span><span class="p">(</span> <span class="s1">'notice'</span><span class="p">,</span> <span class="s2">"you're post has been created"</span> <span class="p">);</span>
    <span class="nv">$app</span><span class="o">-&gt;</span><span class="na">redirect</span><span class="p">(</span> <span class="nv">$app</span><span class="o">-&gt;</span><span class="na">urlFor</span><span class="p">(</span> <span class="s1">'posts_index'</span> <span class="p">)</span> <span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
    <span class="nv">$app</span><span class="o">-&gt;</span><span class="na">flash</span><span class="p">(</span> <span class="s1">'error'</span><span class="p">,</span> <span class="s1">'your post was not valid'</span> <span class="p">);</span>
    <span class="nv">$app</span><span class="o">-&gt;</span><span class="na">flash</span><span class="p">(</span> <span class="s1">'errors'</span><span class="p">,</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">errors</span><span class="p">()</span> <span class="p">);</span>
    <span class="nv">$app</span><span class="o">-&gt;</span><span class="na">redirect</span><span class="p">(</span> <span class="nv">$app</span><span class="o">-&gt;</span><span class="na">urlFor</span><span class="p">(</span> <span class="s1">'posts_new'</span> <span class="p">)</span> <span class="p">);</span>
  <span class="p">}</span>
<span class="p">})</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">(</span> <span class="s1">'posts_create'</span> <span class="p">);</span>

<span class="cm">/* view all */</span>
<span class="nv">$app</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span> <span class="s1">'/posts'</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span> <span class="nv">$app</span><span class="p">,</span> <span class="nv">$data</span> <span class="p">)</span> <span class="p">{</span>
  <span class="nv">$data</span><span class="p">[</span><span class="s1">'posts'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">Post</span><span class="o">::</span><span class="na">all</span><span class="p">();</span>
  <span class="nv">$app</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span> <span class="s1">'posts.twig'</span><span class="p">,</span> <span class="nv">$data</span> <span class="p">);</span>
<span class="p">})</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">(</span> <span class="s1">'posts_index'</span> <span class="p">);</span>
</pre></td></tr></tbody></table>
</div>

<p>Above there are three routes.  GET <code>/posts</code> to view all posts,  GET <code>/posts/new</code> to enter a new post and POST <code>/posts</code> to create the post.  On lines 9 and 31 you can see calls to a class <code>Post</code> which we will create shortly in our models directory.  On line 12 you can see that you can use <code>$posts-&gt;validate()</code> to verify entered input.</p>

<p>Here&rsquo;s the  model along with validation located in<code>app/models/Post.php</code></p>
<div class="highlight php"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>
<span class="k">class</span> <span class="nc">Post</span> <span class="k">extends</span> <span class="nx">Illuminate\Database\Eloquent\Model</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="nv">$table</span> <span class="o">=</span> <span class="s1">'posts'</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$errors</span><span class="p">;</span>

    <span class="k">private</span> <span class="nv">$rules</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
      <span class="s1">'title'</span>   <span class="o">=&gt;</span> <span class="s1">'required|between:4,16'</span><span class="p">,</span>
      <span class="s1">'content'</span>  <span class="o">=&gt;</span> <span class="s1">'required|min:3'</span>
    <span class="p">);</span>
    <span class="k">private</span> <span class="nv">$messages</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
      <span class="s1">'required'</span> <span class="o">=&gt;</span> <span class="s1">'Your :attribute is required.'</span><span class="p">,</span>
      <span class="s1">'min'</span>      <span class="o">=&gt;</span> <span class="s1">'Your :attribute must be at least :min characters long.'</span><span class="p">,</span>
      <span class="s1">'max'</span>      <span class="o">=&gt;</span> <span class="s1">'Your :attribute must be a maximum of :max characters long.'</span><span class="p">,</span>
      <span class="s1">'between'</span>  <span class="o">=&gt;</span> <span class="s1">'Your :attribute must be between :min - :max characters long.'</span><span class="p">,</span>
      <span class="s1">'email'</span>    <span class="o">=&gt;</span> <span class="s1">'Your :attribute must be a valid email address'</span>
    <span class="p">);</span>


    <span class="k">public</span> <span class="k">function</span> <span class="nf">validate</span><span class="p">(</span><span class="nv">$params</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$validator</span> <span class="o">=</span> <span class="nx">Validator</span><span class="o">::</span><span class="na">make</span><span class="p">(</span> <span class="nv">$params</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">rules</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">messages</span> <span class="p">);</span>
        <span class="k">if</span><span class="p">(</span> <span class="nv">$validator</span><span class="o">-&gt;</span><span class="na">fails</span><span class="p">()</span> <span class="p">)</span>
        <span class="p">{</span>
          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">errors</span> <span class="o">=</span> <span class="nv">$validator</span><span class="o">-&gt;</span><span class="na">errors</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">all</span><span class="p">();</span>
          <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>    

    <span class="k">public</span> <span class="k">function</span> <span class="nf">errors</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">errors</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table>
</div>

<p><em>Validation is entirely optional - If you do not require validation just create the class and extend <code>Illuminate\Database\Eloquent\Model</code></em></p>

<p>At this point we just need to create our views - but before that you should run <code>composer update</code> so that your new model can be automatically loaded.</p>

<p>All templates are kept in <code>app/views</code>  </p>

<p>posts.twig</p>
<div class="highlight html"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12</pre></td><td class="code"><pre>{% extends 'layout.twig' %}

{% block content %}
  <span class="nt">&lt;ul&gt;</span>
  {% for post in posts %}
    <span class="nt">&lt;li&gt;</span>{{ post.title }}<span class="nt">&lt;/li&gt;</span>
    {% else %}
    There are no posts here :(
  {% endfor %}
  <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ urlFor('posts_new') }}"</span><span class="nt">&gt;</span>Create Post<span class="nt">&lt;/a&gt;</span>
{% endblock %}
</pre></td></tr></tbody></table>
</div>

<p>posts_new.twig</p>
<div class="highlight html"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21</pre></td><td class="code"><pre>{% extends 'layout.twig' %}

{% block content %}
 <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"{{ urlFor('posts_create') }}"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
 {% if flash.error %}
  <span class="nt">&lt;p&gt;</span>{{ flash.error }}<span class="nt">&lt;/p&gt;</span>
  {% if flash.errors %}
    <span class="nt">&lt;ul&gt;</span>
    {% for error in flash.errors %}
    <span class="nt">&lt;li&gt;</span>{{ error }}<span class="nt">&lt;/li&gt;</span>
    {% endfor %}
    <span class="nt">&lt;/ul&gt;</span>
  {% endif %}
 {% endif %}
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"title"</span> <span class="na">placeholder=</span><span class="s">"Title"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;br&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"content"</span> <span class="na">placeholder=</span><span class="s">"Content"</span><span class="nt">&gt;</span>
<span class="nt">&lt;br&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"Create"</span><span class="nt">&gt;</span>
 <span class="nt">&lt;/form&gt;</span>
{% endblock %}
</pre></td></tr></tbody></table>
</div>

<p>layout.twig (Put your layout in here as usual)</p>
<div class="highlight php"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2</pre></td><td class="code"><pre>{% block content %}
{% endblock %}
</pre></td></tr></tbody></table>
</div>

<p>As you can see, Slim functions are available with <code>urlFor()</code> being called on line 11 in <code>posts.twig</code> and line 4 in <code>posts_new.twig</code>.  You can also use Slim&rsquo;s flash functionality to send messages to redirections.  At this point everything should work!</p>

<h3>Custom Configurations</h3>

<p>Perhaps you don&rsquo;t want your templates to be in a view folder, you want to disable twig caching or change error reporting for different environments?</p>

<p>99% of the magic inside of <code>app/application.php</code>.  This is where Slim is instantiated along with Twig and Eloquent. Make sure that you take a look so you can perfect your own set up!</p>

<h3>Resources</h3>

<p>While putting this together I came across some links which helped me out a lot.  Here are as many as I can remember:</p>

<ul>
<li><a href="http://www.slimframework.com/news/slim-and-laravel-eloquent-orm">Slim and Laravel Eloquent ORM</a></li>
<li><a href="https://github.com/codeguy/Slim-Extras/pull/58">Fix Class &lsquo;Twig_Extensions_Slim&rsquo; not found</a></li>
<li><a href="http://www.12devsofxmas.co.uk/post/2012-12-29-day-4-mixing-and-matching-php-components-with-composer">Mixing and Matching PHP Components with Composer</a></li>
<li><a href="https://github.com/codeguy/Slim-Views">Slim Views</a></li>
</ul>

	</article>
  <hr>
  <h2>About the Author</h2>
  <div id="about-me">
	<div class="partial-container">
    <p>Hi, I'm Mitch and I'm a 26 year old programmer from the UK.</p>
    
    <p>I work for a web design agency in Telford called The Studio 4 where I build web applications with many different languages and tools.</p>

		<p>In my spare time I do many things. I like to read books, lift weights, play guitar, play video games and write these articles!</p>
	</div>
</div>

	<div class="pagination">
		<ul>
			<li class="page-prev"><a href="/">Back to Latest Blogs</a></li>
		</ul>
	</div>
	<div id="disqus_thread"></div>
	<script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
		        var disqus_shortname = 'mitchstanleysblog'; // required: replace example with your forum shortname
				
				        /* * * DON'T EDIT BELOW THIS LINE * * */
						        (function() {
	            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
	            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
	            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
	        })();
		</script>
		<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
		<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></span></a></a></noscript></script></div>

          </div>
        </div>
        <div class="push"></div>
      </div>

      <footer class="footer-2">
        <div class="partial-container">
          <ul>
            <li><a class="contact" href="#">Contact</a></li>
          </ul>

          <div class="footer-secondary-links">
            <ul class="footer-social">
              <li>
                <a href="https://twitter.com/mitchartemis"><span class="fa fa-twitter"></span></a>
              </li>
              <li>
                <a href="https://github.com/acoustep"><span class="fa fa-github"></span></a>
              </li>
            </ul>
          </div>
        </div>
      </footer>
      <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
      <script src="../javascripts/application-678994e1.js" type="text/javascript"></script>
    </body>
  </html>
