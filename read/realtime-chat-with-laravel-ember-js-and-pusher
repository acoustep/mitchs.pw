<!doctype html>
<html>
  <head>
    <meta charset="utf-8">

    <!-- Always force latest IE rendering engine or request Chrome Frame -->
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <meta name="author" content="Mitch Stanley">

    <!-- Use title if it's in the page YAML frontmatter -->
    <title>FullStack Stanley | Realtime chat with Laravel, Ember JS and Pusher</title>

      <meta name="twitter:card" content="summary">
      <meta property="og:description" content="">
      <meta property="og:title" content="Realtime chat with Laravel, Ember JS and Pusher">
      <meta property="og:url" content="http://fullstackstanley.com/read/realtime-chat-with-laravel-ember-js-and-pusher">
      <meta property="og:type" content="article">
      <meta property="article:published_time" content="2015-03-29T17:44:00Z">
      <meta property="article:tag" content="Laravel">
      <meta property="article:tag" content="Laravel 5">
      <meta property="article:tag" content="Ember JS">
      <meta property="article:tag" content="Pusher">
      <meta property="article:tag" content="Bootstrap 3">

      <link href="../stylesheets/application-9b65009b.css" rel="stylesheet" type="text/css" />
      <link href="../stylesheets/rogue-7109134b.css" rel="stylesheet" type="text/css" />
      <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
        ga('create', 'UA-42788138-1', 'auto');
        ga('send', 'pageview');
      </script>
    </head>

    <body class="read read_realtime-chat-with-laravel-ember-js-and-pusher">
      <div class="wrapper-for-content-outside-of-footer">
        <header class="centered-navigation">
	<div class="centered-navigation-wrapper">
		<a href="javascript:void(0)" class="mobile-logo">
			<img src="https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/placeholder_logo_3_dark.png" alt="">
		</a>
		<a href="" class="centered-navigation-menu-button">MENU</a>
		<ul class="centered-navigation-menu">
			<li class="nav-link"><a href="/">Home</a></li>
			<li class="nav-link"><a class="contact" href="#top">Contact</a></li>
		</ul>
	</div>
</header>

        <a name="top"></a>
        <div id="contact">
	<div class="partial-container">
		<h5>Contact</h5>
		<p><a href="http://twitter.com/mitchartemis" target="_blank"><span class="fa fa-twitter"></span> Contact me via Twitter</a></p>
		<p><a href="http://github.com/acoustep" target="_blank"><span class="fa fa-github"></span> Contact me via Github</a></p>
	</div>
</div>

        <div id="container">
          <div id="main">
            	<article>
		<h1>Realtime chat with Laravel, Ember JS and Pusher</h1>
    <div class="tags">
        <a href="/read/categories/laravel">Laravel</a>
        <a href="/read/categories/laravel-5">Laravel 5</a>
        <a href="/read/categories/ember-js">Ember JS</a>
        <a href="/read/categories/pusher">Pusher</a>
        <a href="/read/categories/bootstrap-3">Bootstrap 3</a>
    </div>
		<p><em>Posted on Mar 29, 2015</em></p>
		<p>I&rsquo;ve been hearing a lot of noise about <a href="https://www.firebase.com/">Firebase</a> recently. Lots of good noise.  When I first started making this article I wanted to make use of <a href="http://firehose.io/">Firehose</a> which is an open source alternative to Firebase. </p>

<p>Setting up the API with Laravel was a breeze.  The only stumbling block was with my Ubuntu Vagrant box which installed a version of Redis which was too old (Firehose requries 2.6+ where as Ubuntu&rsquo;s package manager only has 2.2).   This was a pretty simple to fix and if you <em>are</em> interested in Firehose then you can find instructions for getting the latest Redis <a href="http://codecuriosity.com/blog/2013/10/29/install-redis-on-ubuntu/">here</a>.</p>

<p>Anyway I started building my Ember application and I hit a brick wall.  Firehose touts Ember support out of the box but I can see literally no documentation on how to get started with it.</p>

<p>I decided to switch to Pusher which I&rsquo;m already familiar with.  Unfortunately Pusher isn&rsquo;t open source but it does have a reasonable free package.  This allowed me to continue the use of my Laravel application where as switching to Firebase would not.  Also, there is already a pretty amazing Firebase Ember tutorial <a href="https://www.firebase.com/blog/2015-03-13-ember-cli-in-9-minutes.html">here</a> so it seems pointless to do the same thing.</p>

<p>This article will show you a very bare bones chat system with Laravel 5, Ember JS 1.10 and Pusher.</p>

<p></p>

<h2>Laravel</h2>

<p>Start off by making a new Laravel application</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>laravel new realtimechat
</pre></td></tr></tbody></table>
</div>

<p>For this application you&rsquo;ll use 2 packages:  <a href="https://github.com/laracasts/Laravel-5-Generators-Extended">laracasts/Laravel-5-Generators-Extended</a> and <a href="https://github.com/vinkla/pusher">vinkla/pusher</a>.</p>

<p>Install the two packages</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2</pre></td><td class="code"><pre>composer require laracasts/generators --dev
composer require vinkla/pusher:~1.0
</pre></td></tr></tbody></table>
</div>

<p>In <code>app/Providers/AppServiceProvider.php</code> add the generator service provider as suggested in the documentation.</p>
<div class="highlight php"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3</pre></td><td class="code"><pre>if ($this-&gt;app-&gt;environment() == 'local') {
  $this-&gt;app-&gt;register('Laracasts\Generators\GeneratorsServiceProvider');
}
</pre></td></tr></tbody></table>
</div>

<p>In <code>config/app.php</code> Add the Pusher service provider.  Do not add the facade as at the time of writing there is an issue with it.</p>
<div class="highlight php"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>'Vinkla\Pusher\PusherServiceProvider'
</pre></td></tr></tbody></table>
</div>

<p>Create a new migration for a table called messages</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>php artisan make:migration:schema create_messages_table --schema="name:string, body:string"
</pre></td></tr></tbody></table>
</div>

<p>The first field, <code>name</code>, will be the user&rsquo;s name.  The second field, <code>body</code>, will be the content of the message.  You might be tempted to rename <code>body</code> to <code>content</code> (as I was).  I recommend that you don&rsquo;t because Ember&rsquo;s controllers and templates set <code>content</code> to the current model which makes things unnecessaryly confusing.</p>

<p>If you haven&rsquo;t configured your database settings then now is the time.  I&rsquo;m using Sqlite for this application which works perfectly well. Run the migration afterwards.</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>php artisan migrate
</pre></td></tr></tbody></table>
</div>

<p>You will need to remove the global CSRF token protection provided by Laravel.  If your app has other non-API routes then I recommend wrapping them in <code>Route::group</code> with the CSRF middleware.  You can remove the global middleware in <code>app/Http/Kernal.php</code> by removing the <code>App\Http\Middleware\VerifyCSRFToken</code> line.</p>

<p>At this point make sure you have signed up at <a href="http://pusher.com">Pusher</a> and create your first application. </p>

<p>In your terminal publish the Pusher configuration file with this command</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>php artisan vendor:publish
</pre></td></tr></tbody></table>
</div>

<p>Open up <code>app/config/pusher.php</code> and add your <code>auth_key</code>, <code>secret</code> and <code>app_id</code> to the <code>main</code> array. These can be found on your Pusher application&rsquo;s dashboard.</p>

<p>In <code>app/Http/routes.php</code> add a new resource route.</p>
<div class="highlight php"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2</pre></td><td class="code"><pre><span class="cp">&lt;?php</span>
<span class="nx">Route</span><span class="o">::</span><span class="na">resource</span><span class="p">(</span><span class="s1">'messages'</span><span class="p">,</span> <span class="s1">'MessagesController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'only'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'index'</span><span class="p">,</span> <span class="s1">'store'</span><span class="p">,</span> <span class="s1">'show'</span><span class="p">]]);</span>
</pre></td></tr></tbody></table>
</div>

<p>You&rsquo;ll only be using <code>index</code> and <code>store</code> but it&rsquo;s worth defining <code>show</code> incase Ember tries to fetch a single row.</p>

<p>Now create the controller</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>php artisan make:controller MessagesController
</pre></td></tr></tbody></table>
</div>

<p>Open up <code>app/Http/Controllers/MessagesController.php</code> and update the code as follows:</p>
<div class="highlight php"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63</pre></td><td class="code"><pre><span class="cp">&lt;?php</span> <span class="k">namespace</span> <span class="nx">App\Http\Controllers</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Http\Requests</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Http\Controllers\Controller</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Message</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Illuminate\Http\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Input</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">GuzzleHttp\Client</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Vinkla\Pusher\PusherManager</span><span class="p">;</span>


<span class="k">class</span> <span class="nc">MessagesController</span> <span class="k">extends</span> <span class="nx">Controller</span> <span class="p">{</span>

  <span class="k">protected</span> <span class="nv">$message</span><span class="p">;</span>
  <span class="k">protected</span> <span class="nv">$pusher</span><span class="p">;</span>

  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">Message</span> <span class="nv">$message</span><span class="p">,</span> <span class="nx">PusherManager</span> <span class="nv">$pusher</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">message</span> <span class="o">=</span> <span class="nv">$message</span><span class="p">;</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pusher</span> <span class="o">=</span> <span class="nv">$pusher</span><span class="p">;</span>
  <span class="p">}</span>

    <span class="sd">/**
     * Display a listing of the resource.
     *
     * @return Response
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span>
    <span class="p">{</span>
    <span class="nv">$messages</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">message</span><span class="o">-&gt;</span><span class="na">orderBy</span><span class="p">(</span><span class="s1">'id'</span><span class="p">,</span> <span class="s1">'desc'</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">take</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>

    <span class="k">return</span> <span class="nx">Response</span><span class="o">::</span><span class="na">json</span><span class="p">([</span><span class="s1">'messages'</span> <span class="o">=&gt;</span> <span class="nv">$messages</span><span class="o">-&gt;</span><span class="na">toArray</span><span class="p">()]);</span>
    <span class="p">}</span>

    <span class="sd">/**
     * Store a newly created resource in storage.
     *
     * @return Response
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">store</span><span class="p">()</span>
    <span class="p">{</span>
    <span class="nv">$message</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">message</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">(</span><span class="nx">Input</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">'message'</span><span class="p">));</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pusher</span><span class="o">-&gt;</span><span class="na">trigger</span><span class="p">(</span><span class="s1">'messages'</span><span class="p">,</span> <span class="s1">'new-message'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'message'</span> <span class="o">=&gt;</span> <span class="nv">$message</span><span class="o">-&gt;</span><span class="na">toArray</span><span class="p">()]);</span>

    <span class="k">return</span> <span class="nx">Response</span><span class="o">::</span><span class="na">json</span><span class="p">([</span><span class="s1">'message'</span> <span class="o">=&gt;</span> <span class="nv">$message</span><span class="o">-&gt;</span><span class="na">toArray</span><span class="p">()]);</span>
    <span class="p">}</span>

    <span class="sd">/**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return Response
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">show</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="nv">$message</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">message</span><span class="o">-&gt;</span><span class="na">findOrFail</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">Response</span><span class="o">::</span><span class="na">json</span><span class="p">([</span><span class="s1">'message'</span> <span class="o">=&gt;</span> <span class="nv">$message</span><span class="o">-&gt;</span><span class="na">toArray</span><span class="p">()]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table>
</div>

<p>I have used dependancy injection for the <code>Message</code> model and for <code>PusherManager</code> which are set in the constructor.</p>

<p>You may also notice that the JSON responses wrap <code>message</code> for single objects and <code>messages</code> for collections.  This is how Ember will expect its data.  </p>

<p>If you&rsquo;re familiar with Ember then you might be already be considering converting the keys to camel case (created_at to createdAt etc). Don&rsquo;t worry about this for now.</p>

<p>You can also see this line of code</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>$this-&gt;pusher-&gt;trigger('messages', 'new-message', ['message' =&gt; $message-&gt;toArray()]);
</pre></td></tr></tbody></table>
</div>

<p>When you create a new row in the database you want to tell Pusher so that each client can be notified.</p>

<p>The <code>index</code> method on line 30 takes the latest 5 messages.  This as a nice way to introduce newly connected users to the chat without bombarding them with thousands of messages.  Feel free to adjust this to your preference.</p>

<p>At this point it&rsquo;s a good idea to test that the API for creating messages works because it&rsquo;s the trickiest to debug.  </p>

<p>There are a few ways that you can do this.  I&rsquo;ve been using <a href="https://luckymarmot.com/paw">Paw</a> which is a really sweet REST client.  <a href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en">Postman - REST client</a> is an incredible free alternative. </p>

<p>If you&rsquo;re thinking, &ldquo;stop throwing all of these stupid apps in my face. Give me the Curl command!&rdquo; then here you go.</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>curl -X POST -d "message[name]=Mitch" -d "message[body]=this is a message" 'http://realtime.dev/messages'
</pre></td></tr></tbody></table>
</div>

<h2>Ember</h2>

<p>Here&rsquo;s a preview of the final application:</p>

<p><img alt="Realtime Chat" src="http://i.imgur.com/03wDiJq.png" /></p>

<p>Once the messages reach the input fields a scrollbar will appear. The scrollbar will automatically scroll to the bottom when a new message is received.</p>

<p>Go ahead and install Ember CLI if you haven&rsquo;t already</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>npm install -g ember-cli phantomjs
</pre></td></tr></tbody></table>
</div>

<p>For reference I&rsquo;m using the following package versions with <a href="https://iojs.org/en/index.html">IO.js v1.2.0</a></p>

<ul>
<li>Ember-CLI 0.2.1</li>
<li>Ember 1.10</li>
<li>Ember-CLI-HTMLBars 0.7.4</li>
<li>Ember Data 1.0.0-beta.16</li>
<li>jQuery 1.11.2</li>
</ul>

<p>Make a new Ember application.  I recommend doing so outside of your Laravel directory.</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>ember new realtime
</pre></td></tr></tbody></table>
</div>

<p>After it&rsquo;s set up install the following add ons</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2</pre></td><td class="code"><pre>ember install:addon ember-cli-pusher
npm install --save-dev ember-cli-content-security-policy
</pre></td></tr></tbody></table>
</div>

<p>In your configuration file located at <code>config/environment.js</code> add your pusher key to the <code>APP</code> property.</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5</pre></td><td class="code"><pre><span class="nx">PUSHER_OPTS</span><span class="err">:</span> <span class="p">{</span>
 <span class="nl">key</span><span class="p">:</span> <span class="s1">'&lt;KEYHERE&gt;'</span><span class="p">,</span>
 <span class="nx">connection</span><span class="err">:</span> <span class="p">{},</span>
 <span class="nx">logAllEvents</span><span class="err">:</span> <span class="kc">false</span>
<span class="p">}</span>
</pre></td></tr></tbody></table>
</div>

<p>Then above the <code>return ENV;</code> add these Content Security Policy settings - this is necessary for Pusher&rsquo;s data to be retrieved. You can remove the bootstrap stylesheet in <code>style-src</code> if you wish to include it locally or not at all.</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8</pre></td><td class="code"><pre><span class="nx">ENV</span><span class="p">[</span><span class="s1">'contentSecurityPolicy'</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">'default-src'</span><span class="p">:</span> <span class="s2">"'none'"</span><span class="p">,</span>
    <span class="s1">'script-src'</span><span class="p">:</span> <span class="s2">"'self' http://stats.pusher.com/"</span><span class="p">,</span>
    <span class="s1">'connect-src'</span><span class="p">:</span> <span class="s2">"'self' ws://ws.pusherapp.com/"</span><span class="p">,</span> 
    <span class="s1">'img-src'</span><span class="p">:</span> <span class="s2">"'self'"</span><span class="p">,</span>
    <span class="s1">'style-src'</span><span class="p">:</span> <span class="s2">"'self' 'unsafe-inline' http://maxcdn.bootstrapcdn.com/"</span><span class="p">,</span>
    <span class="s1">'media-src'</span><span class="p">:</span> <span class="s2">"'self'"</span><span class="p">,</span>
  <span class="p">};</span>
</pre></td></tr></tbody></table>
</div>

<p>Make <code>messages</code> the root route in <code>app/router.js</code></p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12</pre></td><td class="code"><pre><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">'ember'</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">config</span> <span class="nx">from</span> <span class="s1">'./config/environment'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">location</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">locationType</span>
<span class="p">});</span>

<span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s1">'messages'</span><span class="p">,</span> <span class="p">{</span><span class="na">path</span><span class="p">:</span> <span class="s1">'/'</span><span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{});</span>
<span class="p">});</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">Router</span><span class="p">;</span>
</pre></td></tr></tbody></table>
</div>

<p>Run the following command to change the <code>RestAdapter</code> to one that will work with our API.</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>ember g adapter application
</pre></td></tr></tbody></table>
</div>

<p>In <code>app/adapters/application.js</code> update the adapter name like so:</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4</pre></td><td class="code"><pre><span class="kr">import</span> <span class="nx">DS</span> <span class="nx">from</span> <span class="s1">'ember-data'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">ActiveModelAdapter</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p><code>ActiveModel</code> is a thin wrapper around the Ruby on Rails&#39; ORM <code>ActiveRecord</code>.  I&rsquo;m using this adapter because the API expects data in the same format. This is why you don&rsquo;t need to worry about updating camel case properties to snake case: <code>ActiveModelAdapter</code> handles it all for you.</p>

<p>Create a <code>message</code> model which defines the message properties.</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>ember g model message
</pre></td></tr></tbody></table>
</div>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9</pre></td><td class="code"><pre><span class="c1">// app/models/message.js</span>
<span class="kr">import</span> <span class="nx">DS</span> <span class="nx">from</span> <span class="s1">'ember-data'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'string'</span><span class="p">),</span>
  <span class="na">body</span><span class="p">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'string'</span><span class="p">),</span>
  <span class="na">createdAt</span><span class="p">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'string'</span><span class="p">),</span>
  <span class="na">updatedAt</span><span class="p">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'string'</span><span class="p">)</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p>Now create the messages route which will use the message model</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>ember g route messages
</pre></td></tr></tbody></table>
</div>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8</pre></td><td class="code"><pre><span class="c1">// app/routes/messages.js</span>
<span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">'ember'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">model</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">'message'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p>The messages controller is the most complex part of the application. Create it with the following command.</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>ember g controller messages
</pre></td></tr></tbody></table>
</div>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42</pre></td><td class="code"><pre><span class="c1">// app/controllers/messages.js</span>
<span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">'ember'</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">Bindings</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'ember-pusher/bindings'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ArrayController</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Bindings</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">sortProperties</span><span class="p">:</span> <span class="p">[</span><span class="s1">'createdAt'</span><span class="p">],</span>
  <span class="na">sortAscending</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">logPusherEvents</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">PUSHER_SUBSCRIPTIONS</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">messages</span><span class="p">:</span> <span class="p">[</span><span class="s1">'new-message'</span><span class="p">]</span>
  <span class="p">},</span>
  <span class="na">isValid</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'name'</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'body'</span><span class="p">));</span>
  <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s1">'name'</span><span class="p">,</span> <span class="s1">'body'</span><span class="p">),</span>
  <span class="nx">actions</span><span class="err">:</span> <span class="p">{</span>
    <span class="nl">newMessage</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
      <span class="nx">chat</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">(</span><span class="s1">'#chat'</span><span class="p">);</span>

      <span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">.</span><span class="nx">later</span><span class="p">((</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">_this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">'message'</span><span class="p">,</span> <span class="nx">_this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">normalize</span><span class="p">(</span><span class="s1">'message'</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">message</span><span class="p">));</span>
        <span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">.</span><span class="nx">schedule</span><span class="p">(</span> <span class="s1">'afterRender'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
          <span class="nx">chat</span><span class="p">.</span><span class="nx">animate</span><span class="p">({</span><span class="na">scrollTop</span><span class="p">:</span> <span class="nx">chat</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">scrollHeight</span> <span class="p">});</span>
        <span class="p">});</span>
      <span class="p">}),</span> <span class="mi">200</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="nx">send</span><span class="err">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'isValid'</span><span class="p">))</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">(</span><span class="s1">'message'</span><span class="p">,</span> <span class="p">{</span>
          <span class="na">name</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
          <span class="na">body</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">body</span>
        <span class="p">});</span>
        <span class="nx">message</span><span class="p">.</span><span class="nx">save</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="nx">_this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">'body'</span><span class="p">,</span> <span class="s1">''</span><span class="p">);</span>
        <span class="p">});</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="s1">'Please enter a name and a message.'</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p>There&rsquo;s a lot of interesting stuff going on here.</p>

<p>You&rsquo;re importing Ember-pusher on line 2 and on lines 8-10 we subscribe to the &lsquo;new-message&rsquo; event from Pusher.  When you receive this event Ember will automatically call the action of the same name (but camel cased).</p>

<p>On lines 6 and 7 you&rsquo;re setting how the data will be sorted.  Chat systems generally show the latest messages at the bottom so that&rsquo;s why <code>createdAt</code> is sorted ascending. Do not sort by id because <code>sortProperties</code> only supports strings and therefore &lsquo;10&rsquo; comes before &lsquo;2&rsquo;. This will give the appearance of a completely random order.</p>

<p>This <code>newMessage</code> action pushes the new message onto the model.  It waits a short moment to prevent duplicate entries on the client of the original message with <code>Ember.run.later</code>.</p>

<p>The scrollbar for the chat system needs to automatically scroll to the bottom so that new messages can be seen. To do this <code>Ember.run.schedule</code> is run with <code>afterRender</code> (after the new message has been added to the DOM) and then jQuery is used to animate the chat to the bottom of the screen.</p>

<p>The last action, <code>send</code>, is called when the form in the template is submitted.  The <code>isValid</code> property checks that the <code>name</code> and <code>body</code> has been filled in before sending to the API. Then after the message is saved the <code>body</code> value is cleared so the user can start writing new messages in the input field.</p>

<p>For the user interface I&rsquo;ve chosen to use Twitter Bootstrap 3.2.</p>

<p>Add the bootstrap stylesheet it into <code>app/index.html</code></p>
<div class="highlight html"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"//maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css"</span><span class="nt">&gt;</span>
</pre></td></tr></tbody></table>
</div>

<p>and add the following styles into <code>app/styles/app.css</code></p>
<div class="highlight css"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></td><td class="code"><pre><span class="nc">.message</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#f3f3f4</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.5</span><span class="p">);</span>
  <span class="nl">border-color</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.1</span><span class="p">);</span>
  <span class="nl">margin-top</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
  <span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">0px</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span><span class="p">;</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="m">4px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.message</span><span class="nd">:first-child</span> <span class="p">{</span>
  <span class="nl">margin-top</span><span class="p">:</span> <span class="m">0px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">#chat</span> <span class="p">{</span>
  <span class="nl">overflow</span><span class="p">:</span> <span class="nb">auto</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">340px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form-chat</span> <span class="p">{</span>
  <span class="nl">margin-top</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table>
</div>

<p>Update <code>app/templates/application.hbs</code> like so</p>
<div class="highlight html"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8</pre></td><td class="code"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>    
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-xs-12"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h2</span> <span class="na">id=</span><span class="s">"title"</span><span class="nt">&gt;</span>Ember Chat<span class="nt">&lt;/h2&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  {{outlet}}
<span class="nt">&lt;/div&gt;</span>
</pre></td></tr></tbody></table>
</div>

<p>Then in <code>app/templates/messages.hbs</code></p>
<div class="highlight html"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></td><td class="code"><pre>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>    
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-xs-12"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"chat"</span><span class="nt">&gt;</span>
        {{#each message in arrangedContent}}
          {{message-row message=message}}
        {{/each}}
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;form</span> <span class="err">{{</span><span class="na">action</span> <span class="err">"</span><span class="na">send</span><span class="err">"</span> <span class="na">on=</span><span class="s">"submit"</span><span class="err">}}</span> <span class="na">class=</span><span class="s">"form-chat"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>    
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-xs-2"</span><span class="nt">&gt;</span>
        {{input placeholder="Name" classNames="form-control" value=name}}
      <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-xs-9"</span><span class="nt">&gt;</span>
        {{input placeholder="Message" classNames="form-control" value=body}}
      <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-xs-1 text-right"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;button</span> <span class="err">{{</span><span class="na">bind-attr</span> <span class="na">class=</span><span class="s">":btn :btn-primary isValid::disabled"</span><span class="err">}}</span><span class="nt">&gt;</span>Send<span class="nt">&lt;/button&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/form&gt;</span>
</pre></td></tr></tbody></table>
</div>

<p>Here there is a form with an action <code>send</code> which is sent to the messages controller. The send button has 2 static classes and 1 dynamic one.  When the controller&rsquo;s <code>isValid</code> property is false then the <code>disabled</code> class will be added to the button - giving it the appearance of being unusable.</p>

<p>On lines 4-6 the messages are looped through and sent to a <code>message-row</code> component which we&rsquo;ll create next.</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>ember g component message-row
</pre></td></tr></tbody></table>
</div>

<p>in <code>app/components/message-row.js</code></p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7</pre></td><td class="code"><pre><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">'ember'</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="na">tagName</span><span class="p">:</span> <span class="s1">'div'</span><span class="p">,</span>
  <span class="na">classNames</span><span class="p">:</span> <span class="p">[</span><span class="s1">'message'</span><span class="p">],</span>
  <span class="na">message</span><span class="p">:</span> <span class="kc">null</span>
<span class="p">});</span>
</pre></td></tr></tbody></table>
</div>

<p>And for the template in <code>app/templates/components/message-row.hbs</code></p>
<div class="highlight html"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>[{{message.createdAt}}] {{message.name}}: {{message.messageContent}}
</pre></td></tr></tbody></table>
</div>

<p>Components are partials with no context.  You can adjust their settings in <code>app/components/*.js</code> and adjust the templates in <code>app/templates/components/*.hbs</code>.</p>

<h2>Preview</h2>

<p>Here&rsquo;s a short video of the system in action. There are two browser windows are used to show the new messages being loaded in realtime.</p>

<iframe src="http://gfycat.com/ifr/RichTinyDegus" frameborder="0" scrolling="no" width="600" height="338" style="-webkit-backface-visibility: hidden;-webkit-transform: scale(1);" ></iframe>

<h2>Conclusion</h2>

<p>In this article I have shown you how to set up a simple Laravel 5 API that&rsquo;s compatible with Ember JS.  I used Pusher to send realtime notifications to clients and discussed some of the alternatives briefly.  I then set up the chat system in Ember which sends and receives messages in realtime.</p>

<p>In some ways I&rsquo;ve found this project easy but in others I feel I have failed. I&rsquo;m quite disapointed that I couldn&rsquo;t get Firehose to work with Ember and if I had more time I would have liked to have pursued it further.</p>

<p>This application was done in one weekend and in my opinion it is far from finished. It could definitely do with authentication and there are some kinks that need to be ironed out.</p>

<p>One kink in particular is when a client sends a message it&rsquo;s pushed to the top of the chat because the <code>createdAt</code> timestamp is not set.  This fixes itself when the Pusher event updates it but it&rsquo;s not ideal.</p>

<p>I believe this could easily be fixed by adding <code>moment.js</code> and inserting the current time when creating a new record. If you&rsquo;ve created the application yourself then I definitely recommend doing this as the next step.</p>

	</article>
  <hr>
  <h2>About the Author</h2>
  <div id="about-me">
	<div class="partial-container">
    <p>My name is Mitch Stanley and I'm a 25 year old programmer from the UK.</p>
    
    <p>I work for a web design agency in Telford called The Studio 4 where I build web applications with many different languages and tools.</p>

		<p>In my spare time I do many things. I like to read books, lift weights, play guitar, play video games and write these articles!</p>
	</div>
</div>

	<div class="pagination">
		<ul>
			<li class="page-prev"><a href="/">Back to Latest Blogs</a></li>
		</ul>
	</div>
	<div id="disqus_thread"></div>
	<script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
		        var disqus_shortname = 'mitchstanleysblog'; // required: replace example with your forum shortname
				
				        /* * * DON'T EDIT BELOW THIS LINE * * */
						        (function() {
	            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
	            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
	            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
	        })();
		</script>
		<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
		<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></span></a></a></noscript></script></div>

          </div>
        </div>
        <div class="push"></div>
      </div>

      <footer class="footer-2">
        <div class="partial-container">
          <ul>
            <li><a class="contact" href="#">Contact</a></li>
          </ul>

          <div class="footer-secondary-links">
            <ul class="footer-social">
              <li>
                <a href="https://twitter.com/mitchartemis"><span class="fa fa-twitter"></span></a>
              </li>
              <li>
                <a href="https://github.com/acoustep"><span class="fa fa-github"></span></a>
              </li>
            </ul>
          </div>
        </div>
      </footer>
      <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
      <script src="../javascripts/application-678994e1.js" type="text/javascript"></script>
    </body>
  </html>
