<!doctype html>
<html>
  <head>
    <meta charset="utf-8">

    <!-- Always force latest IE rendering engine or request Chrome Frame -->
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <meta name="author" content="Mitch Stanley">

    <!-- Use title if it's in the page YAML frontmatter -->
    <title>FullStack Stanley | Realtime chat with Vue.js and Phoenix</title>

      <meta name="twitter:card" content="summary">
      <meta property="og:description" content="Realtime chat with Vue.js and Phoenix">
      <meta property="og:title" content="Realtime chat with Vue.js and Phoenix">
      <meta property="og:url" content="http://fullstackstanley.com/read/realtime-chat-with-vue-js-and-phoenix">
      <meta property="og:type" content="article">
      <meta property="article:published_time" content="2016-01-03T14:33:00Z">
      <meta property="article:tag" content="Elixir">
      <meta property="article:tag" content="Phoenix">
      <meta property="article:tag" content="Vue.js">
      <meta property="article:tag" content="Javascript">

      <link href="../stylesheets/application-4816ef59.css" rel="stylesheet" type="text/css" />
      <link href="../stylesheets/rogue-7109134b.css" rel="stylesheet" type="text/css" />
      <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
        ga('create', 'UA-42788138-1', 'auto');
        ga('send', 'pageview');
      </script>
    </head>

    <body class="read read_realtime-chat-with-vue-js-and-phoenix">
      <div class="wrapper-for-content-outside-of-footer">
        <header class="centered-navigation">
	<div class="centered-navigation-wrapper">
		<a href="javascript:void(0)" class="mobile-logo">
			<img src="https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/placeholder_logo_3_dark.png" alt="">
		</a>
		<a href="" class="centered-navigation-menu-button">MENU</a>
		<ul class="centered-navigation-menu">
			<li class="nav-link"><a href="/">Home</a></li>
			<li class="nav-link"><a class="contact" href="#top">Contact</a></li>
		</ul>
	</div>
</header>

        <a name="top"></a>
        <div id="contact">
	<div class="partial-container">
		<h5>Contact</h5>
		<p><a href="http://twitter.com/mitchartemis" target="_blank"><span class="fa fa-twitter"></span> Contact me via Twitter</a></p>
		<p><a href="http://github.com/acoustep" target="_blank"><span class="fa fa-github"></span> Contact me via Github</a></p>
	</div>
</div>

        <div id="container">
          <div id="main">
            	<article>
		<h1>Realtime chat with Vue.js and Phoenix</h1>
    <div class="tags">
        <a href="/read/categories/elixir">Elixir</a>
        <a href="/read/categories/phoenix">Phoenix</a>
        <a href="/read/categories/vue-js">Vue.js</a>
        <a href="/read/categories/javascript">Javascript</a>
    </div>
		<p><em>Posted on Jan  3, 2016</em></p>
		<p>Vue.js is a javascript framework for &ldquo;Reactive Components for Modern Web Interfaces&rdquo;.  Vue.js allows for you to make small components on your page as well as full-blown single page applications. </p>

<p>Sometimes all I want is a component or two on a page rather than investing the website&rsquo;s whole infrastructure in a Javascript framework and this is why I enjoy using Vue.js.</p>

<p>This quick tutorial uses the backend of the Phoenix <a href="http://www.phoenixframework.org/docs/channels#section-tying-it-all-together">channel tutorial located on the official website</a> and gives an alternative for the front end code built with Vue.js to illustrate how easy it is to use these two technologies together.</p>

<p>I won&rsquo;t be explaining the backend code as I would be parroting what&rsquo;s on the Phoenix documentation. Please read the above link for a full understanding. You can copy the code snippets below before we move on to integrating Vue.js</p>

<h2>Versions</h2>

<p>Elixir 1.1
Phoenix 1.1
Vue.js 1.0.13</p>

<h2>Channel Code</h2>

<p>Run <code>mix phoenix.new chat</code> to set up the new application.</p>
<div class="highlight elixir"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15</pre></td><td class="code"><pre><span class="o">//</span> <span class="n">web</span><span class="o">/</span><span class="n">channels</span><span class="o">/</span><span class="n">user_socket</span><span class="o">.</span><span class="n">ex</span>
<span class="k">defmodule</span> <span class="no">Chat</span><span class="o">.</span><span class="no">UserSocket</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">Socket</span>

  <span class="c1">## Channels</span>
  <span class="n">channel</span> <span class="sd">"</span><span class="s2">rooms:lobby"</span><span class="p">,</span> <span class="no">Chat</span><span class="o">.</span><span class="no">RoomChannel</span>

  <span class="n">transport</span> <span class="ss">:websocket</span><span class="p">,</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">Transports</span><span class="o">.</span><span class="no">WebSocket</span>

  <span class="k">def</span> <span class="n">connect</span><span class="p">(</span><span class="n">_params</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">id</span><span class="p">(</span><span class="n">_socket</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="no">nil</span>
<span class="k">end</span>
</pre></td></tr></tbody></table>
</div>
<div class="highlight elixir"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></td><td class="code"><pre><span class="o">//</span><span class="n">web</span><span class="o">/</span><span class="n">channels</span><span class="o">/</span><span class="n">room_channel</span><span class="o">.</span><span class="n">ex</span>
<span class="k">defmodule</span> <span class="no">Chat</span><span class="o">.</span><span class="no">RoomChannel</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">Chat</span><span class="o">.</span><span class="no">Web</span><span class="p">,</span> <span class="ss">:channel</span>

  <span class="k">def</span> <span class="n">join</span><span class="p">(</span><span class="sd">"</span><span class="s2">rooms:lobby"</span><span class="p">,</span> <span class="n">payload</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">join</span><span class="p">(</span><span class="sd">"</span><span class="s2">rooms:"</span> <span class="o">&lt;&gt;</span> <span class="n">_private_room_id</span><span class="p">,</span> <span class="n">_params</span><span class="p">,</span> <span class="n">_socket</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="p">%{</span><span class="ss">reason:</span> <span class="sd">"</span><span class="s2">Unauthorized"</span><span class="p">}}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">handle_in</span><span class="p">(</span><span class="sd">"</span><span class="s2">new_msg"</span><span class="p">,</span> <span class="p">%{</span><span class="sd">"</span><span class="s2">body"</span> <span class="o">=&gt;</span> <span class="n">body</span><span class="p">},</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">broadcast!</span> <span class="n">socket</span><span class="p">,</span> <span class="sd">"</span><span class="s2">new_msg"</span><span class="p">,</span> <span class="p">%{</span><span class="ss">body:</span> <span class="n">body</span><span class="p">}</span>
    <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">handle_out</span><span class="p">(</span><span class="sd">"</span><span class="s2">new_msg"</span><span class="p">,</span> <span class="n">payload</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">push</span> <span class="n">socket</span><span class="p">,</span> <span class="sd">"</span><span class="s2">new_msg"</span><span class="p">,</span> <span class="n">payload</span>
    <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table>
</div>

<p>The router and page controller, view and template should all be generated automatically when the app was made.</p>

<h2>Integrating Vue.js</h2>

<p>First up, let&rsquo;s get Vue.js set up with Phoenix. There are few ways to do this. Here are a couple of options to get you started.</p>

<ol>
<li>Copy a CDN link into <code>web/templates/layout/app.html.ex</code>.</li>
</ol>

<p>The javascript can be included like so</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2</pre></td><td class="code"><pre>&lt;script src="http://cdnjs.cloudflare.com/ajax/libs/vue/1.0.13/vue.min.js"&gt;&lt;/script&gt;
&lt;script src="&lt;%= static_path(@conn, "/js/app.js") %&gt;"&gt;&lt;/script&gt;
</pre></td></tr></tbody></table>
</div>

<ol>
<li> Place Vue.js in your web/static/vendor/ directory</li>
</ol>

<p>Brunch is set up to include any code in the vendor directory on compilation so it will be available with the other scripts.</p>

<p>You can download Vue.js from the website manually, or use NPM and copy it.</p>
<div class="highlight shell"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>npm install vue --save-dev
</pre></td></tr></tbody></table>
</div>
<div class="highlight shell"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>cp node_modules/vue/dist/vue.js web/static/vendor/vue.js
</pre></td></tr></tbody></table>
</div>

<p>Now running <code>brunch build</code> or <code>mix phoenix.server</code> will compile Vue.js with your Javascript.</p>

<h2>Setting up the HTML</h2>

<p>Edit your <code>web/templates/page/index.html.ex</code> like so</p>
<div class="highlight elixir"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8</pre></td><td class="code"><pre><span class="o">&lt;</span><span class="n">div</span> <span class="n">id</span><span class="o">=</span><span class="sd">"</span><span class="s2">app"</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">li</span> <span class="n">v</span><span class="o">-</span><span class="n">for</span><span class="o">=</span><span class="sd">"</span><span class="s2">message in messages"</span><span class="o">&gt;</span>
      <span class="p">[{{</span> <span class="n">message</span><span class="o">.</span><span class="n">at</span> <span class="p">}}]</span> <span class="p">{{</span> <span class="n">message</span><span class="o">.</span><span class="n">body</span> <span class="p">}}</span>
    <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="o">-</span><span class="sd">"</span><span class="s2">text"</span> <span class="n">v</span><span class="o">-</span><span class="n">model</span><span class="o">=</span><span class="sd">"</span><span class="s2">newMessage"</span> <span class="n">v</span><span class="o">-</span><span class="ss">on:</span><span class="n">keyup</span><span class="o">.</span><span class="m">13</span><span class="o">=</span><span class="sd">"</span><span class="s2">sendNewMessage"</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</pre></td></tr></tbody></table>
</div>

<p>The div with the ID &ldquo;app&rdquo; will be used by Vue.js, any code inside here is going to be available.</p>

<p>There&rsquo;s a <code>v-for=&quot;message in messages&quot;</code> on line 3 which will loop through an array of objects.</p>

<p>Line 4 will output the chat messages and the time they were added.</p>

<p>Line 7 is an input box, bound to Vue.js by <code>v-model=&quot;newMessage&quot;</code> and will trigger a <code>sendNewMessage</code> method when the Enter key (13) is pressed.</p>

<p>Booting up the Phoenix server with <code>mix phoenix.server</code> will show a bunch of curly brackets as we haven&rsquo;t initialized the Vue.js Javascript yet.</p>

<p><img alt="Pre Vue.js preview" src="http://i.imgur.com/wCfowYv.png" /></p>

<h2>Javascript</h2>

<p>Now in <code>web/static/js/app.js</code> uncomment the socket import.</p>

<p>In web/static/js/socket.js add this code</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><pre><span class="kr">import</span> <span class="p">{</span><span class="nx">Socket</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">"deps/phoenix/web/static/js/phoenix"</span>

<span class="kd">let</span> <span class="nx">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Socket</span><span class="p">(</span><span class="s2">"/socket"</span><span class="p">,</span> <span class="p">{</span><span class="na">params</span><span class="p">:</span> <span class="p">{</span><span class="na">token</span><span class="p">:</span> <span class="nb">window</span><span class="p">.</span><span class="nx">userToken</span><span class="p">}})</span>

<span class="nx">socket</span><span class="p">.</span><span class="nx">connect</span><span class="p">()</span>

<span class="kd">let</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="na">el</span><span class="p">:</span> <span class="s1">'#app'</span><span class="p">,</span>
  <span class="nx">ready</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">channel</span> <span class="o">=</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">channel</span><span class="p">(</span><span class="s2">"rooms:lobby"</span><span class="p">,</span> <span class="p">{});</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">channel</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">"new_msg"</span><span class="p">,</span> <span class="nx">payload</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">payload</span><span class="p">.</span><span class="nx">at</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">();</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">payload</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">channel</span><span class="p">.</span><span class="nx">join</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">receive</span><span class="p">(</span><span class="s2">"ok"</span><span class="p">,</span> <span class="nx">resp</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Joined successfully"</span><span class="p">,</span> <span class="nx">resp</span><span class="p">)</span> <span class="p">})</span>
      <span class="p">.</span><span class="nx">receive</span><span class="p">(</span><span class="s2">"error"</span><span class="p">,</span> <span class="nx">resp</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Unable to join"</span><span class="p">,</span> <span class="nx">resp</span><span class="p">)</span> <span class="p">})</span>
  <span class="p">},</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">messages</span><span class="p">:</span> <span class="p">[],</span>
    <span class="na">newMessage</span><span class="p">:</span> <span class="s1">''</span><span class="p">,</span>
    <span class="na">channel</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">computed</span><span class="p">:</span> <span class="p">{</span>

  <span class="p">},</span>
  <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">sendNewMessage</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">channel</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">"new_msg"</span><span class="p">,</span> <span class="p">{</span><span class="na">body</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">newMessage</span><span class="p">});</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">newMessage</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">socket</span>
</pre></td></tr></tbody></table>
</div>

<p>The import socket, socket.connect() is unchanged. The Vue.js class uses el to know which HTML to use. The <code>ready</code> method is a lifecycle hook which is called after Vue has finished compilation (There&rsquo;s a nice diagram here of all the lifecycle hooks http://vuejs.org/guide/instance.html#Lifecycle_Diagram).</p>

<p>We have set the channel to an instance variable in the <code>ready</code> method.  So we can call it in various places throughout the code. This will be useful shortly when we need to push an event to the server.</p>

<p>The ready method is also where we join the <code>rooms:lobby</code> and subscribe to the <code>new_msg</code> event from Phoenix. When this event is sent from the server we append the new message to our <code>messages</code> instance variable which then automatically shows in the HTML we wrote previously (the <code>v-for</code> loop).</p>

<p>There&rsquo;s a <code>methods</code> object where we put the <code>sendNewMessage</code> method which is triggered from the <code>newMessage</code> input we wrote earlier. This method pushes the message to Phoenix, ready to be published across all connections. It then sets <code>newMessage</code> to &ldquo; so the user can begin typing a fresh message.</p>

<p>At this point if you reload the page the curly brackets should disappear. When you enter a new message it should appear in the list!</p>

<p><img alt="Vue.js preview" src="http://i.imgur.com/w2pa5zo.png" /></p>

<p>That&rsquo;s all there is to it! Try opening multiple windows and messaging between each to see it in action.</p>

<h2>Bonus points</h2>

<p>Add Moment.js for a simpler date format</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre><span class="nx">payload</span><span class="p">.</span><span class="nx">at</span> <span class="o">=</span> <span class="nx">moment</span><span class="p">().</span><span class="nx">format</span><span class="p">(</span><span class="s1">'YYYY-MM-DD HH:mm:ss'</span><span class="p">);</span>
</pre></td></tr></tbody></table>
</div>

<p>Style with CSS!</p>
<div class="highlight javascript"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2</pre></td><td class="code"><pre><span class="c">&lt;!--</span> <span class="nx">web</span><span class="o">/</span><span class="nx">templates</span><span class="o">/</span><span class="nx">page</span><span class="o">/</span><span class="nx">index</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">ex</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">span</span> <span class="kr">class</span><span class="o">=</span><span class="s2">"brackets"</span><span class="o">&gt;</span><span class="p">[</span><span class="o">&lt;</span><span class="sr">/span&gt;&lt;span class="time"&gt;{{ message.at }}&lt;/</span><span class="nx">span</span><span class="o">&gt;&lt;</span><span class="nx">span</span> <span class="kr">class</span><span class="o">=</span><span class="s2">"brackets"</span><span class="o">&gt;</span><span class="p">]</span><span class="o">&lt;</span><span class="sr">/span&gt; {{ message.body }</span><span class="err">}
</span></pre></td></tr></tbody></table>
</div>
<div class="highlight css"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21</pre></td><td class="code"><pre><span class="nf">#app</span> <span class="nt">ul</span> <span class="p">{</span>
  <span class="nl">list-style-type</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">#app</span> <span class="nt">li</span> <span class="p">{</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">5px</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.brackets</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#ccc</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.time</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#999</span><span class="p">;</span>
  <span class="nl">font-style</span><span class="p">:</span><span class="nb">italic</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">input</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table>
</div>

<p><img alt="Vue.js styled preview" src="http://i.imgur.com/W0GLq6X.png" /></p>

<p>There&rsquo;s a lot more you can do with both Phoenix and Vue.js and I may look at writing some more articles in the future. For now we have a Vue.js frontend which works with the Phoenix channel tutorial backend.</p>

	</article>
  <hr>
  <h2>About the Author</h2>
  <div id="about-me">
	<div class="partial-container">
    <p>Hi, I'm Mitch and I'm a 27 year old programmer from the UK.</p>
    
    <p>I work for a web design agency in Telford called The Studio 4. I build web applications with many different languages and tools.</p>

		<p>In my spare time I do many things. I like to read books, lift weights, go bouldering, play board/video games and write these articles!</p>
	</div>
</div>

	<div class="pagination">
		<ul>
			<li class="page-prev"><a href="/">Back to Latest Blogs</a></li>
		</ul>
	</div>
	<div id="disqus_thread"></div>
	<script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
		        var disqus_shortname = 'mitchstanleysblog'; // required: replace example with your forum shortname
				
				        /* * * DON'T EDIT BELOW THIS LINE * * */
						        (function() {
	            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
	            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
	            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
	        })();
		</script>
		<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
		<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></span></a></a></noscript></script></div>

          </div>
        </div>
        <div class="push"></div>
      </div>

      <footer class="footer-2">
        <div class="partial-container">
          <ul>
            <li><a class="contact" href="#">Contact</a></li>
          </ul>

          <div class="footer-secondary-links">
            <ul class="footer-social">
              <li>
                <a href="https://twitter.com/mitchartemis"><span class="fa fa-twitter"></span></a>
              </li>
              <li>
                <a href="https://github.com/acoustep"><span class="fa fa-github"></span></a>
              </li>
            </ul>
          </div>
        </div>
      </footer>
      <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
      <script src="../javascripts/application-678994e1.js" type="text/javascript"></script>
      <script>
      (function(d, t) {
          var g = d.createElement(t),
              s = d.getElementsByTagName(t)[0];
          g.src = 'http://assets.gfycat.com/js/gfyajax-0.517d.js';
          s.parentNode.insertBefore(g, s);
      }(document, 'script'));
      </script>
    </body>
  </html>
