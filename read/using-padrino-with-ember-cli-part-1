<!doctype html>
<html>
  <head>
    <meta charset="utf-8">

    <!-- Always force latest IE rendering engine or request Chrome Frame -->
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <meta name="author" content="Mitch Stanley">

    <!-- Use title if it's in the page YAML frontmatter -->
    <title>FullStack Stanley | Using Padrino with Ember CLI Part 1</title>

      <meta name="twitter:card" content="summary">
      <meta property="og:description" content="After listening to the Ruby Rogues’ Padrino episode I was sold on the idea of using Padrino for smaller websites and simple API’s...">
      <meta property="og:title" content="Using Padrino with Ember CLI Part 1">
      <meta property="og:url" content="http://fullstackstanley.com/read/using-padrino-with-ember-cli-part-1">
      <meta property="og:type" content="article">
      <meta property="article:published_time" content="2015-02-11T20:59:00Z">
      <meta property="article:tag" content="Ruby">
      <meta property="article:tag" content="Padrino">
      <meta property="article:tag" content="Ember">
      <meta property="article:tag" content="Ember-CLI">
      <meta property="article:tag" content="Javascript">
      <meta property="article:tag" content="Sequel">
      <meta property="article:tag" content="sqlite">
      <meta property="article:tag" content="RABL">

      <link href="../stylesheets/application-feb6d2e3.css" rel="stylesheet" type="text/css" />
      <link href="../stylesheets/rogue-7109134b.css" rel="stylesheet" type="text/css" />
      <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
        ga('create', 'UA-42788138-1', 'auto');
        ga('send', 'pageview');
      </script>
    </head>

    <body class="read read_using-padrino-with-ember-cli-part-1">
      <div class="wrapper-for-content-outside-of-footer">
        <header class="centered-navigation">
	<div class="centered-navigation-wrapper">
		<a href="javascript:void(0)" class="mobile-logo">
			<img src="https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/placeholder_logo_3_dark.png" alt="">
		</a>
		<a href="" class="centered-navigation-menu-button">MENU</a>
		<ul class="centered-navigation-menu">
			<li class="nav-link"><a href="/">Home</a></li>
			<li class="nav-link"><a class="contact" href="#top">Contact</a></li>
		</ul>
	</div>
</header>

        <a name="top"></a>
        <div id="contact">
	<div class="partial-container">
		<h5>Contact</h5>
		<p><a href="http://twitter.com/mitchartemis" target="_blank"><span class="fa fa-twitter"></span> Contact me via Twitter</a></p>
		<p><a href="http://github.com/acoustep" target="_blank"><span class="fa fa-github"></span> Contact me via Github</a></p>
	</div>
</div>

        <div id="container">
          <div id="main">
            	<article>
		<h1>Using Padrino with Ember CLI Part 1</h1>
    <div class="tags">
        <a href="/read/categories/ruby">Ruby</a>
        <a href="/read/categories/padrino">Padrino</a>
        <a href="/read/categories/ember">Ember</a>
        <a href="/read/categories/ember-cli">Ember-CLI</a>
        <a href="/read/categories/javascript">Javascript</a>
        <a href="/read/categories/sequel">Sequel</a>
        <a href="/read/categories/sqlite">sqlite</a>
        <a href="/read/categories/rabl">RABL</a>
    </div>
		<p><em>Posted on Feb 11, 2015</em></p>
		<p>After listening to the Ruby Rogues’ Padrino episode I was sold on the idea of using Padrino for smaller websites and simple API’s.  I know <a href="https://github.com/intridea/grape">Grape</a> is also a perfect contender for building an Ember APIs but:</p>

<ul>
<li><p>I am already familiar with Sinatra so the learning curve shouldn’t be as steep.</p></li>
<li><p>I wanted to get to know Padrino.</p></li>
<li><p>Funsies.
 
I’m going to show you how to quickly set up both together, build a restful API compatible with Ember’s <code>ActiveModelAdapter</code> and show you a few gotchas to help you on your way.  </p></li>
</ul>

<p></p>

<h2>Note</h2>

<p>This article is aimed at people familiar with Ruby and have some understanding of the MVC pattern (ideally with Padrino or Rails). This article is not a guide for starting out with Padrino. If you have previous Ruby web framework experience you’ll most likely catch on quick.</p>

<p>On the Ember side of things you should be comfortable with Javascript, Ember and ideally Ember-CLI.</p>

<p>I will try to explain everything I do but this article is more about getting the two frameworks to work together.</p>

<p>You can view the full source for both of these articles on <a href="https://github.com/acoustep/padrino-ember-example">Github</a>.</p>

<h2>Getting Started</h2>

<p>Make sure you have Padrino and Ember-CLI installed.  With Ruby and NPM this should be a matter of <code>gem install pardrino</code>, <code>npm install -g ember-cli</code> and <code>npm install -g bower</code>.
 
See Padrino’s <a href="http://www.padrinorb.com/guides/installation">Installation Guide</a> and Ember CLI’s <a href="http://www.ember-cli.com/#getting-started">Getting Started</a> for more details.
 
For reference I’m using the following library versions:</p>

<ul>
<li>IO.js 1.2.0 (Also tested with Node 0.10.36)</li>
<li>NPM 2.5.1</li>
<li>Ember-cli 0.1.15</li>
<li>Ember 1.8.1</li>
<li>Ember-data 1.0.0-beta.14.1</li>
<li>Bower 1.3.12</li>
<li>ruby-2.1.1</li>
<li>Padrino 0.12.4</li>
</ul>

<p>For a directory structure to this article we want 3 directories.
 </p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3</pre></td><td class="code"><pre> - Blog
 |- API
 |- App
</pre></td></tr></tbody></table>
</div>

<p>Make <code>Blog</code> main directory and change in to it.</p>

<p><code>mkdir Blog &amp;&amp; cd Blog</code></p>

<h2>Setting up Padrino</h2>

<p>One of the features of Padrino I love the most is the ability to swap different libraries to your preference. For instance, you have the choice to use your preferred ORM. If you know Rails then you will most likely be comfortable with ActiveRecord. </p>

<p>I have recently been dabbling with Sequel and will be using it for this tutorial as I have become quite fond of it.</p>

<p>Run the following commands to set up Padrino</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4</pre></td><td class="code"><pre>padrino g project API -d sequel -t minitest

cd ./API
bundle
</pre></td></tr></tbody></table>
</div>

<p>Check the <a href="http://www.padrinorb.com/guides/generators">Generators</a> documentation for more options.  You can specify css precompilers, Javascript libraries and mocking libraries as well. As they are not really relevant to this article I have left them off.</p>

<p>Open up your Gemfile in <code>API/Gemfile</code> and add the following gems:</p>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8</pre></td><td class="code"><pre><span class="n">gem</span> <span class="s1">'rabl'</span>
<span class="n">gem</span> <span class="s1">'oj'</span>
<span class="n">gem</span> <span class="s1">'rack-cors'</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="s1">'rack/cors'</span>

<span class="c1"># Optional</span>
<span class="n">group</span> <span class="p">:</span><span class="n">development</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s2">"better_errors"</span>
<span class="k">end</span>
</pre></td></tr></tbody></table>
</div>

<p><a href="https://github.com/nesquena/rabl">RABL</a> stands for “Ruby API Builder language” and let’s us generate JSON for our API incredibly easily. I have to say, I found the documentation incredibly useful and I have found examples for every use case I’ve needed so far.</p>

<p><a href="https://github.com/ohler55/oj">Oj</a> is a RABL dependancy for “speed optimized JSON handling”.</p>

<p><a href="https://github.com/cyu/rack-cors">Rack/CORS</a> “provides support for Cross-Origin Resource Sharing (CORS) for Rack compatible web applications.”</p>

<p><a href="https://github.com/charliesome/better_errors">Better Errors</a> makes debugging so much easier. You can remove it for the tutorial but I do recommend using it in your own applications.</p>

<p>Run <code>bundle</code> to install the new dependancies.</p>

<p>For the sake of keeping the article short we will be creating the API in one Padrino application but it is possible to mount multiple Padrino apps within one another. </p>

<p>We could have one app mounted to <code>api/v1/</code> and then, if we plan to upgrade our API, it’s as simple as mounting another app to <code>api/v2/</code>. </p>

<p>Take a look at the <a href="http://www.padrinorb.com/guides/mounting-applications">Mounting Applications</a> documentation for more information on mounting apps. Also check <a href="http://www.padrinorb.com/guides/generators#sub-app-generator">here</a> for generating the sub-applications.</p>

<h2>The Model</h2>

<p>Keeping things simple, we’ll have one CRUD API for managing blog posts using using the default sqlite database.</p>

<p>We’ll make the model called <code>Post</code> that has 5 fields, <code>id</code>, <code>title</code>, <code>content</code>, <code>created_at</code> and <code>updated_at</code></p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>padrino g model Post title:string content:text created_at:datetime updated_at:datetime
</pre></td></tr></tbody></table>
</div>

<p>This will create 3 files, your model, a migration file and a file for your model tests.</p>

<p>Open the migration file located in <code>db/migrate/001_create_posts.rb</code> and change the updated_at field to be nullable.</p>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15</pre></td><td class="code"><pre><span class="no">Sequel</span><span class="p">.</span><span class="nf">migration</span> <span class="k">do</span>
  <span class="n">up</span> <span class="k">do</span>
    <span class="n">create_table</span> <span class="p">:</span><span class="n">posts</span> <span class="k">do</span>
      <span class="n">primary_key</span> <span class="p">:</span><span class="nb">id</span>
      <span class="no">String</span> <span class="p">:</span><span class="n">title</span>
      <span class="no">Text</span> <span class="p">:</span><span class="n">content</span>
      <span class="no">DateTime</span> <span class="p">:</span><span class="n">created_at</span>
      <span class="no">DateTime</span> <span class="p">:</span><span class="n">updated_at</span><span class="p">,</span> <span class="n">null</span><span class="p">:</span><span class="kp">true</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="err"> </span>
  <span class="n">down</span> <span class="k">do</span>
    <span class="n">drop_table</span> <span class="p">:</span><span class="n">posts</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table>
</div>

<p>When using Sequel you can migrate your database to the latest migration with this rake command:</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>rake sq:migrate:up
</pre></td></tr></tbody></table>
</div>

<p>To make our timestamp columns behave like Ruby on Rails we need to add the Sequel timestamp plugin in our <code>config/database.rb</code>.</p>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre><span class="no">Sequel</span><span class="o">::</span><span class="no">Model</span><span class="p">.</span><span class="nf">plugin</span><span class="p">(</span><span class="ss">:timestamps</span><span class="p">)</span>
</pre></td></tr></tbody></table>
</div>

<p>In the <code>models/post.rb</code> add the following line:</p>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3</pre></td><td class="code"><pre><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">Sequel</span><span class="o">::</span><span class="no">Model</span>
  <span class="no">Sequel</span><span class="o">::</span><span class="no">Model</span><span class="p">.</span><span class="nf">plugin</span> <span class="ss">:timestamps</span>
<span class="k">end</span>
</pre></td></tr></tbody></table>
</div>

<p>This line will sort out updating <code>created_at</code> and <code>updated_at</code> when necessary.</p>

<h2>The Controller</h2>

<p>Run the following to generate the controller:</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>padrino g controller Posts get:index post:create get:show patch:update delete:destroy
</pre></td></tr></tbody></table>
</div>

<p>This will create our controller in <code>app/controllers/post.rb</code>.  We can see in the command we’ve deliberately left out new and edit methods from our CRUD API.  This is because Ember has no need to query them (at least it won’t for our simple application).</p>

<p>Running <code>rake routes</code> we’ll see how we can interact with the routes.</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6</pre></td><td class="code"><pre>    URL                  REQUEST  PATH
    (:posts, :index)        GET    /posts
    (:posts, :create)      POST    /posts/create
    (:posts, :show)         GET    /posts/show
    (:posts, :update)      PATCH   /posts/update
    (:posts, :destroy)    DELETE   /posts/destroy
</pre></td></tr></tbody></table>
</div>

<p>Let’s make it so api/v1 is prepended and for familiarity we’ll also modify our routes to mirror Rail’s conventions found <a href="http://guides.rubyonrails.org/routing.html#crud-verbs-and-actions">here</a>.</p>

<p>In <code>app/controllers/post.rb</code> change it to the following:</p>

<p><strong>Edit:</strong> Big thanks to <a href="https://twitter.com/nesquena">Nathan Esquenazi</a> for showing me a much cleaner way of doing it. For reference you can see my previous code <a href="https://github.com/acoustep/padrino-ember-example/blob/1a0cadc73e4532cca781f2655106f4d878662575/API/app/controllers/posts.rb">here</a></p>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></td><td class="code"><pre><span class="no">Api</span><span class="o">::</span><span class="no">App</span><span class="p">.</span><span class="nf">controllers</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">"api/v1/posts"</span> <span class="k">do</span>

  <span class="n">get</span> <span class="p">:</span><span class="n">index</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">""</span> <span class="k">do</span>

  <span class="k">end</span>

  <span class="n">post</span> <span class="p">:</span><span class="n">create</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">""</span> <span class="k">do</span>

  <span class="k">end</span>

  <span class="n">get</span> <span class="p">:</span><span class="n">show</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">":id"</span> <span class="k">do</span>

  <span class="k">end</span>

  <span class="n">patch</span> <span class="p">:</span><span class="n">update</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">":id"</span> <span class="k">do</span>

  <span class="k">end</span>

  <span class="n">delete</span> <span class="p">:</span><span class="n">destroy</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">":id"</span> <span class="k">do</span>

  <span class="k">end</span>

<span class="k">end</span>
</pre></td></tr></tbody></table>
</div>

<p>If you run <code>rake routes</code> now you should see the following:</p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5</pre></td><td class="code"><pre>    (:posts, :index)        GET    /api/v1/posts
    (:posts, :create)      POST    /api/v1/posts
    (:posts, :show)         GET    /api/v1/posts/:id
    (:posts, :update)      PATCH   /api/v1/posts/:id
    (:posts, :destroy)    DELETE   /api/v1/posts/:id
</pre></td></tr></tbody></table>
</div>

<p>Much better. Now let’s fill in the details</p>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46</pre></td><td class="code"><pre><span class="nb">require</span> <span class="s1">'json'</span>
<span class="no">Api</span><span class="o">::</span><span class="no">App</span><span class="p">.</span><span class="nf">controllers</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">"api/v1/posts"</span> <span class="k">do</span>

  <span class="n">get</span> <span class="p">:</span><span class="n">index</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">""</span> <span class="k">do</span>
    <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">all</span>
    <span class="n">render</span> <span class="s2">"posts/index"</span>
  <span class="k">end</span>

  <span class="n">post</span> <span class="p">:</span><span class="n">create</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">""</span> <span class="k">do</span>
    <span class="n">parameters</span> <span class="o">=</span> <span class="n">post_params</span>
    <span class="k">if</span> <span class="n">parameters</span><span class="p">[</span><span class="s2">"post"</span><span class="p">].</span><span class="nf">nil?</span>
      <span class="k">return</span> <span class="s1">'{}'</span>
    <span class="k">end</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">create</span> <span class="n">parameters</span><span class="p">[</span><span class="s2">"post"</span><span class="p">]</span>
    <span class="n">render</span> <span class="s2">"posts/show"</span>
  <span class="k">end</span>

  <span class="n">get</span> <span class="p">:</span><span class="n">show</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">":id"</span> <span class="k">do</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">[</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">]]</span>
    <span class="n">render</span> <span class="s2">"posts/show"</span>
  <span class="k">end</span>

  <span class="n">put</span> <span class="p">:</span><span class="n">update</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">":id"</span> <span class="k">do</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">[</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">]]</span>

    <span class="k">if</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">nil?</span>
      <span class="k">return</span> <span class="s1">'{}'</span>
    <span class="k">end</span>

    <span class="n">parameters</span> <span class="o">=</span> <span class="n">post_params</span>
    <span class="vi">@post</span><span class="p">.</span><span class="nf">update</span> <span class="n">parameters</span><span class="p">[</span><span class="s2">"post"</span><span class="p">]</span>
    <span class="n">render</span> <span class="s2">"posts/show"</span>

  <span class="k">end</span>

  <span class="n">delete</span> <span class="p">:</span><span class="n">destroy</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">":id"</span> <span class="k">do</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">[</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">]]</span>
    <span class="vi">@post</span><span class="p">.</span><span class="nf">delete</span> <span class="k">unless</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">nil?</span>
  <span class="k">end</span>

<span class="k">end</span>

<span class="k">def</span> <span class="nf">post_params</span>
  <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="nf">body</span><span class="p">.</span><span class="nf">read</span><span class="p">)</span>
<span class="k">end</span>

</pre></td></tr></tbody></table>
</div>

<p>If you&rsquo;re familiar with Active Record you should see some familiar method names.  <code>all</code>, <code>create</code>, <code>delete</code> and <code>update</code> are self explanatory. You may be unfamiliar with how Sequel finds specific rows, though.</p>

<p><code>Post[params[:id]]</code> is the simplest way to retrieve a record by primary key.  <code>params[:id]</code> is just the URL id parameter. So it&rsquo;s more like calling <code>Post[1]</code>.</p>

<p>Occasionally we return blank objects with </p>
<div class="highlight plaintext"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre>return '{}'
</pre></td></tr></tbody></table>
</div>

<p>This may seem unneeded but Ember expects a valid JSON response and if it doesn&rsquo;t get one it will throw a hissy fit.</p>

<h3>Views</h3>

<p>Now we’ll get the JSON responses working. Sequel and RABL make this nice and easy.</p>

<p>Create these two files:</p>

<h3>app/views/index.rabl</h3>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2</pre></td><td class="code"><pre><span class="n">collection</span> <span class="vi">@posts</span><span class="p">,</span> <span class="ss">root: </span><span class="s2">"posts"</span><span class="p">,</span> <span class="ss">object_root: </span><span class="kp">false</span>
<span class="n">attributes</span> <span class="p">:</span><span class="nb">id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="ss">:updated_at</span>
</pre></td></tr></tbody></table>
</div>

<h3>app/views/show.rabl</h3>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2</pre></td><td class="code"><pre><span class="n">object</span> <span class="vi">@post</span>
<span class="n">attributes</span> <span class="p">:</span><span class="nb">id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="ss">:updated_at</span>
</pre></td></tr></tbody></table>
</div>

<p>If you’ve never used RABL before this may look quite alien to you.</p>

<p>We use the <code>collection</code> method when working with multiple objects and the <code>object</code> method when specifying one object in particular.</p>

<p>The collection method has two parameters, <code>root</code> and <code>object_root</code>. <code>root</code> specifies the parent key that wraps around the collection. We set <code>object_root</code> to false because by default RABL adds another key around each row.</p>

<p>Essentially we are changing this JSON:</p>
<div class="highlight json"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10</pre></td><td class="code"><pre><span class="p">[{</span><span class="w">
  </span><span class="s2">"post"</span><span class="p">:</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="s2">"id"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="s2">"title"</span><span class="p">:</span><span class="s2">"test"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"content"</span><span class="p">:</span><span class="s2">"test"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"created_at"</span><span class="p">:</span><span class="s2">"2015-02-11 20:25:21 +0000"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"updated_at"</span><span class="p">:</span><span class="kc">null</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}]</span><span class="w">
</span></pre></td></tr></tbody></table>
</div>

<p>To this Ember-friendly JSON</p>
<div class="highlight json"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10</pre></td><td class="code"><pre><span class="p">{</span><span class="w">
  </span><span class="s2">"posts"</span><span class="p">:</span><span class="w">
  </span><span class="p">[{</span><span class="w">
    </span><span class="s2">"id”:1,
    ”title"</span><span class="p">:</span><span class="s2">"test"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"content"</span><span class="p">:</span><span class="s2">"test"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"created_at"</span><span class="p">:</span><span class="s2">"2015-02-11 20:25:21 +0000"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"updated_at"</span><span class="p">:</span><span class="kc">null</span><span class="w">
  </span><span class="p">}]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table>
</div>

<p>Lastly, the <code>attributes</code> method lets us choose which data we want to show in our API.</p>

<h3>A word on CSRF Protection</h3>

<h4>The problem</h4>

<p>With Rails and Ember-Rails it’s possible to set up CSRF protection by having an API end-point that provides the CSRF token. That token is then placed in a meta tag called <code>csrf_token</code> and then with Ember you set up an AJAX preFilter which sends the token in a header named <code>X-CSRF-Token</code>.</p>

<p>All this is possible with Padrino’s <code>csrf_token</code> method, but due to the fact that your API and Ember-CLI are separate applications you will not have access to the session which verifies the token. </p>

<h4>The solution</h4>

<p>You have 2 options. Disable CSRF entirely or, if your Padrino app is more than just an API, disable it for your API.</p>

<h4>Disabling CSRF Entirely</h4>

<p>Go to <code>app/config/app.rb</code> and set the following</p>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre><span class="n">set</span> <span class="p">:</span><span class="n">protect_from_csrf</span><span class="p">,</span> <span class="kp">false</span>
</pre></td></tr></tbody></table>
</div>

<p>If your app is currently running make sure you restart it now with <code>bundle exec padrino start</code>.</p>

<h4>Disabling CSRF for your API</h4>

<p>If you’re using Better Errors, go to <code>app/config/app.rb</code> and set the following</p>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre><span class="n">set</span> <span class="p">:</span><span class="n">protect_from_csrf</span><span class="p">,</span> <span class="ss">except: </span><span class="sr">%r{/__better_errors/</span><span class="se">\\</span><span class="sr">w+/</span><span class="se">\\</span><span class="sr">w+</span><span class="se">\\</span><span class="sr">z}</span> <span class="k">if</span> <span class="no">Padrino</span><span class="p">.</span><span class="nf">env</span> <span class="o">==</span> <span class="ss">:development</span>
</pre></td></tr></tbody></table>
</div>

<p>If your app is currently running make sure you restart it now with <code>bundle exec padrino start</code>.</p>

<p>In <code>app/controllers/posts.rb</code> we need to disable CSRF for any requests that aren’t <code>get</code>.  We can do that by setting <code>csrf_protection: false</code> in the parameters.</p>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></td><td class="code"><pre><span class="nb">require</span> <span class="s1">'json'</span>
<span class="no">Api</span><span class="o">::</span><span class="no">App</span><span class="p">.</span><span class="nf">controllers</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">"api/v1/posts"</span> <span class="k">do</span>

  <span class="n">get</span> <span class="p">:</span><span class="n">index</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">""</span> <span class="k">do</span>
    <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">all</span>
    <span class="n">render</span> <span class="s2">"posts/index"</span>
  <span class="k">end</span>

  <span class="n">post</span> <span class="p">:</span><span class="n">create</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">""</span><span class="p">,</span> <span class="ss">csrf_protection: </span><span class="kp">false</span> <span class="k">do</span>
    <span class="n">parameters</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="nf">body</span><span class="p">.</span><span class="nf">read</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">parameters</span><span class="p">[</span><span class="s2">"post"</span><span class="p">].</span><span class="nf">nil?</span>
      <span class="k">return</span> <span class="s1">'{}'</span>
    <span class="k">end</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">create</span> <span class="n">parameters</span><span class="p">[</span><span class="s2">"post"</span><span class="p">]</span>
    <span class="n">render</span> <span class="s2">"posts/show"</span>
  <span class="k">end</span>

  <span class="n">get</span> <span class="p">:</span><span class="n">show</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">":id"</span> <span class="k">do</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">[</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">]]</span>
    <span class="n">render</span> <span class="s2">"posts/show"</span>
  <span class="k">end</span>

  <span class="n">put</span> <span class="p">:</span><span class="n">update</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">":id"</span><span class="p">,</span> <span class="ss">csrf_protection: </span><span class="kp">false</span> <span class="k">do</span>
    <span class="vi">@post</span><span class="p">.</span><span class="nf">update</span> <span class="n">params</span>
    <span class="n">render</span> <span class="s2">"posts/show"</span>

  <span class="k">end</span>

  <span class="n">delete</span> <span class="p">:</span><span class="n">destroy</span><span class="p">,</span> <span class="ss">map: </span><span class="s2">":id"</span><span class="p">,</span> <span class="ss">csrf_protection: </span><span class="kp">false</span> <span class="k">do</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">[</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">]]</span>
    <span class="vi">@post</span><span class="p">.</span><span class="nf">delete</span> <span class="k">unless</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">nil?</span>
  <span class="k">end</span>

<span class="k">end</span>
</pre></td></tr></tbody></table>
</div>

<h3>CORS</h3>

<p>We will be using Ember-CLI’s proxy option so we don’t have to worry about CORS. However for production you may want to include it.</p>

<p>In <code>app/app.rb</code> Add the following lines of code to your <code>App</code> class</p>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6</pre></td><td class="code"><pre><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Cors</span> <span class="k">do</span>
  <span class="n">allow</span> <span class="k">do</span>
    <span class="n">origins</span> <span class="s1">'*'</span>
    <span class="n">resource</span> <span class="s1">'*'</span><span class="p">,</span> <span class="ss">:headers</span> <span class="o">=&gt;</span> <span class="ss">:any</span><span class="p">,</span> <span class="ss">:methods</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:get</span><span class="p">,</span> <span class="ss">:post</span><span class="p">,</span> <span class="ss">:options</span><span class="p">,</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">:patch</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table>
</div>

<p>If you look at the Rack/CORS documentation, you can specify URLs that are allowed to access your API by updating the origins method.</p>
<div class="highlight ruby"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1</pre></td><td class="code"><pre><span class="n">origins</span> <span class="s1">'localhost:4200'</span> <span class="c1"># Ember CLI App</span>
</pre></td></tr></tbody></table>
</div>

<p>Before moving on to Part 2 make sure your Padrino app is up and running.  Use <code>bundle exec padrino start</code>.</p>

<h3>Summary</h3>

<p>That’s it for part 1.  We’ve successfully made an API compatible with Ember’s ActiveModelAdapter. We’ve disabled CSRF where necessary and enabled CORS.</p>

<p><a href="/read/using-padrino-with-ember-cli-part-2">Click here to view part 2 for implementing the Ember side of the project</a>.</p>

	</article>
  <hr>
  <h2>About the Author</h2>
  <div id="about-me">
	<div class="partial-container">
    <p>Hi, I'm Mitch and I'm a 26 year old programmer from the UK.</p>
    
    <p>I work for a web design agency in Telford called The Studio 4 where I build web applications with many different languages and tools.</p>

		<p>In my spare time I do many things. I like to read books, lift weights, play guitar, play video games and write these articles!</p>
	</div>
</div>

	<div class="pagination">
		<ul>
			<li class="page-prev"><a href="/">Back to Latest Blogs</a></li>
		</ul>
	</div>
	<div id="disqus_thread"></div>
	<script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
		        var disqus_shortname = 'mitchstanleysblog'; // required: replace example with your forum shortname
				
				        /* * * DON'T EDIT BELOW THIS LINE * * */
						        (function() {
	            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
	            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
	            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
	        })();
		</script>
		<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
		<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></span></a></a></noscript></script></div>

          </div>
        </div>
        <div class="push"></div>
      </div>

      <footer class="footer-2">
        <div class="partial-container">
          <ul>
            <li><a class="contact" href="#">Contact</a></li>
          </ul>

          <div class="footer-secondary-links">
            <ul class="footer-social">
              <li>
                <a href="https://twitter.com/mitchartemis"><span class="fa fa-twitter"></span></a>
              </li>
              <li>
                <a href="https://github.com/acoustep"><span class="fa fa-github"></span></a>
              </li>
            </ul>
          </div>
        </div>
      </footer>
      <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
      <script src="../javascripts/application-678994e1.js" type="text/javascript"></script>
    </body>
  </html>
